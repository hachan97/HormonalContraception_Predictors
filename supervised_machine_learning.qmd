---
title: "random_forest"
format: html
editor: visual
author: Theresa Nutz and Nora Müller 
---

# PROJECT: Is the Pill Outdated?

AUTHORS: Theresa Nutz, Nora Müller

DATA: pairfam w1-w14

# Setup

```{r Setup}
# Codes to install the need packaged and it'll output the package(s) that may have failed to load
knitr::opts_chunk$set(echo = TRUE)
p_needed <-
  c("tidyverse", "randomForest",
    "DataExplorer", "skimr",  "VIM",   # for EDA
    "modelsummary",                    # Descriptive statistics & Models Summary
    "haven", "foreign",                                     # for STATA data type
    "tidymodels", "themis",    # a collection of packages for Machine Learning & Random Forest
    "doParallel",     # for Parallel Processing
    "ranger", "bonsai", "partykit", # engine for fitting Random Dorest models
    "vip", "iml",            # for plotting variable importance
    "treeshap","kernelshap", "shapviz", "SHAPforxgboost", # for SHAP Values & Plots
    "GGally",         # for Correlation Matrix
    "DALEXtra",       # for partial dependence plots
    "caret",          # for Recursive Feature Elimination (RFE)
    "corrplot",       # for Correlation Matrix
    "cowplot",        # for Combining Plots
    "fastDummies"    # Create Dummy Variables
    )

packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]

if (length(p_to_install) > 0) {
  install.packages(p_to_install)
}
sapply(p_needed, require, character.only = TRUE)
```

```{r}
# Check your tidymodels libraries are up-to-date 
tidymodels::tidymodels_update()
```

# Load Raw Data

Note:

-   val1i3: Women should be more concerned about family than about career

-   val1i4: Men should participate in housework to the same extent as women

-   val1i5: A child under age 6 will suffer from having a working mother

```{r}
# Load Raw-data
setwd("H:/oral_contraception_over_time/data")

df1_raw <- read_dta("rf_coh1_27.dta")
df2_raw <- read_dta("rf_coh2_27.dta")
df3_raw <- read_dta("rf_coh2_37.dta")
df4_raw <- read_dta("rf_coh3_37.dta")
```

# Preprocess Data

```{r}
preprocess_dataset <- function(file_path) {
  df_raw <- read_dta(file_path)  # Open Stata datafile
  
  df_processed <- df_raw %>%   
    # Operationalization
    mutate(
      pincnet_log = log(ifelse(pincnet == 0, 1, pincnet)),
      hhincnet_log = log(ifelse(hhincnet == 0, 1, hhincnet)),
      pinc_decile = ntile(log(ifelse(pincnet == 0, 1, pincnet)), 10),
      hhincnet_decile = ntile(log(ifelse(hhincnet == 0, 1, hhincnet)), 10),
      bmi_category = factor(cut(bmi, breaks = c(-Inf, 18.5, 25, 30, Inf),
                                     labels = c("Underweight", "Normal", "Overweight", "Obese")),
                                 levels = c("Underweight", "Normal", "Overweight", "Obese"), ordered = TRUE),
      relstat = case_when(relstat %in% c(1, 5, 6, 9) ~ "Single",
                          relstat %in% c(2, 7, 10) ~ "LAT",
                          relstat %in% c(3, 8, 11) ~ "Cohabiting",
                          relstat %in% c(4, 5) ~ "Married"),
      nkids = factor(if_else(nkids < 3, nkids, 3), levels = c(0, 1, 2, 3), ordered = TRUE),
      empl = case_when(lfs %in% c(1:8) ~ "Education/not working",
                       lfs %in% c(9,12,13) ~ "Full-time or self-employment",
                       lfs %in% c(10,11) ~ "Marginal or part-time employment"),
      edu = factor(case_when(isced %in% c(1,2) ~ "Basic",
                         isced %in% c(0,3,4) ~ "Intermediate",
                         isced %in% c(5,6,7,8) ~ "Advanced"), 
               levels = c("Basic", "Intermediate", "Advanced"), ordered = TRUE),
      migback = case_when(migstatus == 1 ~ 0,
                          migstatus %in% c(2,3) ~ 1),
      urban = case_when(gkpol %in% 1:4 ~ 0, gkpol %in% 5:7 ~ 1),
      sex_often = case_when(sexfreq >= 4 ~ 1,
                            sexfreq < 4 ~ 0),
      denomination = case_when(sd30 == 7 ~ "None", 
                               sd30 == 1 ~ "Roman Catholic", 
                               sd30 == 2 ~ "Protestant",
                               sd30 == 3 ~ "Muslim",
                               sd30 %in% c(4, 5, 6) ~ "Other"),
      rel = factor(case_when(sd31 == 6 ~ "Never", 
                             sd31 == 5 ~ "Seldom",
                             sd31 == 4 ~ "Occasionally",
                             sd31 %in% c(1, 2, 3) ~ "Frequent"), 
                    levels = c("Never", "Seldom", "Occasionally", "Frequent"), ordered = TRUE),
      gendercomp = case_when(gendercomp == 0 ~ "No children",
                             gendercomp == 1 ~ "Equal gender composition",
                             gendercomp == 2 ~ "More boys",
                             gendercomp == 3 ~ "More girls"),
      migstatus = case_when(migstatus == 1 ~ "No migration background",
                            migstatus == 2 ~ "1st generation",
                            migstatus == 3 ~ "2nd generation"),
      health = factor(case_when(health == 1 ~ "Bad",
                            health == 2 ~ "Not so good",
                            health == 3 ~ "Satisfactory",
                            health == 4 ~ "Good",
                            health == 5 ~ "Very good"), 
                  levels = c("Bad", "Not so good", "Satisfactory", "Good", "Very good"), ordered = TRUE), 
      region = case_when(region == 0 ~ "Western Germany",
                         region == 1 ~ "Eastern Germany",
                         region == 2 ~ "Abroad"),
      ethni = case_when(ethni == 1 ~ "German native",
                        ethni == 2 ~ "Ethnic-German",
                        ethni == 3 ~ "Half-German",
                        ethni == 4 ~ "Turkish background",
                        ethni == 5 ~ "Other non-German background"),
      addchild = case_when(addchild == 0 ~ "No",
                        addchild == 1 ~ "Yes",
                        addchild == 2 ~ "Unsure")#,
      #abortion = case_when(abortion == 0 ~ "No abortion", abortion == 1 ~ "Abortion")
      ) %>% 

    # Convert the variables to Factors & Numericals
    mutate(
      across(c(hormon, hormon_iudh, hormon_iudnh, hormon_iudor, 
               relstat, nkids, lfs, isced, migstatus, health, region, bula, 
               addchild, gkpol, deadchild, gendercomp, sd30, sd31, 
               abortion, ethni, empl, edu, migback, urban, 
               sex_often, denomination, rel), 
             as.factor),
      
      across(c(id, wave, age, pincnet, hhincnet, height, weight, 
               bmi, val1i3, val1i4, val1i5, sexfreq, extraversion, 
               agreeableness, conscientiousness, neuroticism, 
               openness, pincnet_log, hhincnet_log), 
             as.numeric)
    ) %>% 
    
    # Select the desired Variables
    select(id, wave, age, relstat, nkids, 
           pincnet_log, hhincnet_log, pinc_decile, pincnet, hhincnet, hhincnet_decile,
           empl, edu, ethni,
           migback, health, height, weight, bmi, bmi_category,
           val1i3, val1i4, val1i5, region, bula,
           addchild, urban, sex_often, deadchild, gendercomp, extraversion,
           agreeableness, conscientiousness, neuroticism, openness, denomination,
           rel, abortion,
           hormon, hormon_iudh, hormon_iudnh, hormon_iudor
           ) %>% 
  
  return(df_processed)
}

```

```{r}
# Run 1st Preprocessing Step
setwd("H:/oral_contraception_over_time/data")
df1_processed <- preprocess_dataset("rf_coh1_27.dta")
df2_processed <- preprocess_dataset("rf_coh2_27.dta")
df3_processed <- preprocess_dataset("rf_coh2_37.dta")
df4_processed <- preprocess_dataset("rf_coh3_37.dta")
```

```{r}
# SAVE each dataframe separately in .RData format
setwd("H:/oral_contraception_over_time/data")

save(df1_processed, file = "df1_processed.RData") # For df1_processed
save(df2_processed, file = "df2_processed.RData") # For df2_processed
save(df3_processed, file = "df3_processed.RData") # For df3_processed
save(df4_processed, file = "df4_processed.RData") # For df4_processed
```

```{r}
# LOAD Up each dataframe

setwd("H:/oral_contraception_over_time/data")
#setwd("C:/Users/Bryan Chan/Documents/Projects/oral_contraception_over_time/data/")
load("df1_processed.RData") 
load("df2_processed.RData") 
load("df3_processed.RData") 
load("df4_processed.RData") 
```

# Labels

Label Type 1

```{r}
labels <- c(
  id = "Person identifier",
  age = "Age",
  wave = "Survey year",
  relstat = "Relationship status",
  nkids = "Number of children",
  pinc_decile = "Personal net income",
  hhincnet_decile = "Household net income",
  empl = "Labor force status",
  edu = "Educational level",
  ethni = "Ethnicity",
  migback = "Migration background",
  health = "General health",
  height = "Height",
  weight = "Weight",
  bmi_category = "Body Mass Index",
  val1i3 = "Values: Female employment",
  val1i4 = "Values: Division of housework",
  val1i5 = "Values: Maternal employment", 
  region = "Region of birth",
  addchild = "Additional children planned",
  urban = "Urbanity of region",
  sex_often = "Frequent sexual intercourse",
  gendercomp = "Childrens' gender composition",
  extraversion = "Big 5: Extraversion",
  agreeableness = "Big 5: Agreeableness",
  conscientiousness = "Big 5: Conscientiousness",
  neuroticism = "Big 5: Neuroticism",
  openness = "Big 5: Openness",
  denomination = "Religious denomination",
  rel = "Religious event attendance",
  abortion = "Abortion experience",
  urban_X1 = "Urbanity of region",
  abortion_X1 = "Abortion experience",
  sex_often_X1 = "Frequent sexual intercourse",
  migback_X1 = "Migration background",
  nkids_X1 = "Number of children: 1",
  nkids_X2 = "Number of children: 2",
  nkids_X3 = "Number of children: 3",
  relstat_LAT = "Relationship status: LAT",
  relstat_Married = "Relationship status: Married",
  relstat_Single = "Relationship status: Single",
  empl_Full.time.or.self.employment = "Labor force status: Full time or self employment",
  empl_Marginal.or.part.time.employment = "Labor force status: Marginal or part time employment",
  ethni_German.native = "Ethnicity: German native",
  ethni_Half.German = "Ethnicity: Half German",
  ethni_Other.non.German.background = "Ethnicity: Other non German background",
  ethni_Turkish.background = "Ethnicity: Turkish background",
  bmi_category_Normal = "Body Mass Index: Normal",
  bmi_category_Overweight = "Body Mass Index: Overweight",
  bmi_category_Obese = "Body Mass Index: Obese",
  region_Eastern.Germany = "Region of birth: Eastern Germany",
  region_Western.Germany = "Region of birth: Western Germany",
  addchild_Unsure = "Additional children planned: Unsure",
  addchild_Yes = "Additional children planned: Yes",
  denomination_None = "Religious denomination: None",
  denomination_Other = "Religious denomination: Other",
  denomination_Protestant = "Religious denomination: Protestant",
  denomination_Roman.Catholic = "Religious denomination: Roman Catholic",
  rel_1 = "Religious event attendance: Never",
  rel_2 = "Religious event attendance: Occasionally",
  rel_Seldom = "Religious event attendance: Seldom",
  edu_Basic = "Educational level: Basic",
  edu_Intermediate = "Educational level: Intermediate",
  health_Good = "General health: Good",
  health_Not.so.good = "General health: Not so good",
  health_Satisfactory = "General health: Satisfactory",
  health_Very.good = "General health: Very good"
  )
```

Label Type 2

```{r}
labels <- c(
  id = "Person identifier",
  age = "Age",
  wave = "Survey year",
  relstat = "Relationship status",
  nkids = "Number of children",
  pinc_decile = "Personal net income",
  hhincnet_decile = "Household net income",
  empl = "Labor force status",
  edu = "Educational level",
  ethni = "Ethnicity",
  migback = "Migration background",
  health = "General health",
  height = "Height",
  weight = "Weight",
  bmi_category = "Body Mass Index",
  val1i3 = "Values: Female employment",
  val1i4 = "Values: Division of housework",
  val1i5 = "Values: Maternal employment", 
  region = "Region of birth",
  addchild = "Additional children planned",
  urban = "Urbanity of region",
  sex_often = "Frequent sexual intercourse",
  gendercomp = "Childrens' gender composition",
  extraversion = "Big 5: Extraversion",
  agreeableness = "Big 5: Agreeableness",
  conscientiousness = "Big 5: Conscientiousness",
  neuroticism = "Big 5: Neuroticism",
  openness = "Big 5: Openness",
  denomination = "Religious denomination",
  rel = "Religious event attendance",
  abortion = "Abortion experience",
  urban_X1 = "Urbanity of region",
  abortion_X1 = "Abortion experience",
  sex_often_X1 = "Frequent sexual intercourse",
  migback_X1 = "Migration background",
  nkids_1 = "Number of children: 1",
  nkids_2 = "Number of children: 2",
  nkids_3 = "Number of children: 3 and more",
  relstat_LAT = "Relationship status: LAT",
  relstat_Married = "Relationship status: Married",
  relstat_Single = "Relationship status: Single",
  empl_Full.time.or.self.employment = "Labor force status: Full time or self employment",
  empl_Marginal.or.part.time.employment = "Labor force status: Marginal or part time employment",
  ethni_German.native = "Ethnicity: German native",
  ethni_Half.German = "Ethnicity: Half German",
  ethni_Other.non.German.background = "Ethnicity: Other non German background",
  ethni_Turkish.background = "Ethnicity: Turkish background",
  bmi_category_1 = "Body Mass Index: Normal",
  bmi_category_2 = "Body Mass Index: Overweight",
  bmi_category_3= "Body Mass Index: Obese",
  region_Eastern.Germany = "Region of birth: Eastern Germany",
  region_Western.Germany = "Region of birth: Western Germany",
  addchild_Unsure = "Additional children planned: Unsure",
  addchild_Yes = "Additional children planned: Yes",
  denomination_None = "Religious denomination: None",
  denomination_Other = "Religious denomination: Other",
  denomination_Protestant = "Religious denomination: Protestant",
  denomination_Roman.Catholic = "Religious denomination: Roman Catholic",
  rel_1 = "Religious event attendance: Seldom",
  rel_2= "Religious event attendance: Occasionally",
  rel_3 = "Religious event attendance: Frequent",
  edu_1 = "Educational level: Intermediate",
  edu_2 = "Educational level: Advanced",
  health_3 = "General health: Good",
  health_1 = "General health: Not so good",
  health_2 = "General health: Satisfactory",
  health_4 = "General health: Very good"
)
```

```{r}
df1_rf_train_prep %>%  colnames
```

# Data Exploration

## Missing values

```{r}
# Missing value distribution in df_RAW
NAs_df1_raw <- df1_raw %>% 
  plot_missing(title = "Distribution of NAs (df1_raw)")

NAs_df2_raw <- df2_raw %>% 
  plot_missing(title = "Distribution of NAs (df2_raw)")

NAs_df3_raw <- df3_raw %>% 
  plot_missing(title = "Distribution of NAs (df3_raw)")

NAs_df4_raw <- df4_raw %>% 
  plot_missing(title = "Distribution of NAs (df4_raw)")

setwd("H:/oral_contraception_over_time/results")
ggsave("NAs_df1_raw.png", NAs_df1_raw, width = 8, height = 10)
ggsave("NAs_df2_raw.png", NAs_df2_raw, width = 8, height = 10)
ggsave("NAs_df3_raw.png", NAs_df3_raw, width = 8, height = 10)
ggsave("NAs_df4_raw.png", NAs_df4_raw, width = 8, height = 10)
```

```{r}
# Missing value distribution in df_PROCESSED
NAs_df1_processed <- df1_processed %>% 
  plot_missing(title = "Distribution of NAs (df1_processed)")

NAs_df2_processed <- df2_processed %>% 
  plot_missing(title = "Distribution of NAs (df2_processed)")

NAs_df3_processed <- df3_processed %>% 
  plot_missing(title = "Distribution of NAs (df3_processed)")

NAs_df4_processed <- df4_processed %>% 
  plot_missing(title = "Distribution of NAs (df4_processed)")

setwd("H:/oral_contraception_over_time/results")
ggsave("NAs_df1_processed.png", NAs_df1_processed, width = 8, height = 10)
ggsave("NAs_df2_processed.png", NAs_df2_processed, width = 8, height = 10)
ggsave("NAs_df3_processed.png", NAs_df3_processed, width = 8, height = 10)
ggsave("NAs_df4_processed.png", NAs_df4_processed, width = 8, height = 10)
```

```{r}
plot(aggr(df1_processed, plot = FALSE), 
     numbers = TRUE, prop = FALSE)

plot(aggr(df2_processed, plot = FALSE), 
     numbers = TRUE, prop = FALSE)

plot(aggr(df3_processed, plot = FALSE), 
     numbers = TRUE, prop = FALSE)

plot(aggr(df4_processed, plot = FALSE), 
     numbers = TRUE, prop = FALSE)
```

## Descriptive Graphs

```{r}
# Frequency distribution
save_Descriptive_plots_A <- function(df, df_name) {
  DGplot_categorical <- df %>% 
    plot_bar()
  DGplot_continuous <- df %>% 
    plot_histogram()

  for (i in 1:length(DGplot_categorical)) {
    ggsave(paste0("H:/oral_contraception_over_time/results/DGplotA_", 
                  df_name, "_categorical_", i, ".png"), 
           DGplot_categorical[[i]], width = 8, height = 10)
  }
  
  ggsave(paste0("H:/oral_contraception_over_time/results/DGplotA_", 
                df_name, "_continuous.png"), 
         DGplot_continuous$page_1, width = 8, height = 10)
}

save_Descriptive_plots_A(df1_processed, "df1")
save_Descriptive_plots_A(df2_processed, "df2")
save_Descriptive_plots_A(df3_processed, "df3")
save_Descriptive_plots_A(df4_processed, "df4")
```

```{r}
# Distribution by the Target variable

save_Descriptive_plots_B <- function(df, df_name) {
  df_categorical <- df %>% 
    plot_bar(by  = "hormon_iudor")

  df_continuous <- df %>% 
    plot_qq(by = "hormon_iudor")

  ggsave(paste0("H:/oral_contraception_over_time/results/DGplotB_", 
                df_name, "_categorical_1.png"), 
         df_categorical$page_1, width = 8, height = 10)
  ggsave(paste0("H:/oral_contraception_over_time/results/DGplotB_", 
                df_name, "_categorical_2.png"), 
         df_categorical$page_2, width = 8, height = 10)
  ggsave(paste0("H:/oral_contraception_over_time/results/DGplotB_", 
                df_name, "_continuous_1.png"), 
         df_continuous$page_1, width = 8, height = 10)
  ggsave(paste0("H:/oral_contraception_over_time/results/DGplotB_", 
                df_name, "_continuous_2.png"), 
         df_continuous$page_2, width = 8, height = 10)
}

save_Descriptive_plots_B(df1_processed, "df1")
save_Descriptive_plots_B(df2_processed, "df2")
save_Descriptive_plots_B(df3_processed, "df3")
save_Descriptive_plots_B(df4_processed, "df4")
```

## Descriptive Stats

```{r}
# List of dataframes
df_list <- list(df1_processed, df2_processed, df3_processed, df4_processed)

# List of source names
source_names <- c("Birth cohort 1 (age 27)", "Birth cohort 2 (age 27)", "Birth cohort 2 (age 37)", "Birth cohort 3 (age 37)")

DS_summary_continious <- data.frame()
DS_summary_categorical <- data.frame()

# Loop over each dataframe
for(i in 1:length(df_list)) {
  DS_current <- datasummary_skim(df_list[[i]], type = "numeric", output = "data.frame")
  DS_current$Source <- source_names[i]
  DS_summary_continious <- rbind(DS_summary_continious, DS_current)
}

# Loop over each dataframe
for(i in 1:length(df_list)) {
  DS_current <- datasummary_skim(df_list[[i]], type = "categorical", output = "data.frame")
  DS_current$Source <- source_names[i]
  DS_summary_categorical <- rbind(DS_summary_categorical, DS_current)
}

DS_summary_continious
DS_summary_categorical

write.csv(DS_summary_continious,
          "H:/oral_contraception_over_time/results/DS_summary_continious.csv")
write.csv(DS_summary_categorical,
          "H:/oral_contraception_over_time/results/DS_summary_categorical.csv")
```

## Correlation Matrix

```{r}
create_and_save_heatmap <- function(data, filename, width = 10, height = 8) {
  heatmap <- data %>%
    plot_correlation(cor_args = list("use" = "pairwise.complete.obs"))
  
  ggsave(paste0("H:/oral_contraception_over_time/results/", filename), heatmap, 
         width = width, height = height)
}

# Usage for each dataset
create_and_save_heatmap(df1_processed, "heatmap_a_df1.png")
create_and_save_heatmap(df1_cleaned %>% mutate(across(where(is.factor), as.numeric)), "heatmap_b_df1.png")
create_and_save_heatmap(df2_processed, "heatmap_a_df2.png")
create_and_save_heatmap(df2_cleaned %>% mutate(across(where(is.factor), as.numeric)), "heatmap_b_df2.png")
create_and_save_heatmap(df3_processed, "heatmap_a_df3.png")
create_and_save_heatmap(df3_cleaned %>% mutate(across(where(is.factor), as.numeric)), "heatmap_b_df3.png")
create_and_save_heatmap(df4_processed, "heatmap_a_df4.png")
create_and_save_heatmap(df4_cleaned %>% mutate(across(where(is.factor), as.numeric)), "heatmap_b_df4.png")
```

# Data Cleaning (Final)

```{r}
# Create Final Dataframe
clean_select_df <- function(df) {
  cleaned_df <- df %>% 
    select(wave, relstat, nkids, pinc_decile, hhincnet_decile,
           empl, edu, ethni, health, bmi_category,
           val1i3, val1i4, val1i5, region, 
           addchild, urban, sex_often, 
           extraversion, agreeableness, conscientiousness, neuroticism, openness, 
           denomination, rel, abortion, 
           migback,
           hormon_iudor) %>% 
    na.omit() # deletes all observations containing missing values
  return(cleaned_df)
}

# Apply the function
df1_cleaned <- clean_select_df(df1_processed)
df2_cleaned <- clean_select_df(df2_processed)
df3_cleaned <- clean_select_df(df3_processed)
df4_cleaned <- clean_select_df(df4_processed)
```

```{r}
# Save '_cleaned' as csv
setwd("H:/oral_contraception_over_time/data")
write.csv(df1_cleaned, "df1_cleaned.csv")
write.csv(df2_cleaned, "df2_cleaned.csv")
write.csv(df3_cleaned, "df3_cleaned.csv")
write.csv(df4_cleaned, "df4_cleaned.csv")
```

## Class Imbalance

Explore the imbalanced target variable:

```{r}
setwd("H:/oral_contraception_over_time/")

hormon_iudor_df1 <- df1_raw %>%
  count(hormon_iudor) %>%
  mutate(prop = n / sum(n) * 100) %>% 
  ggplot(aes(x = hormon_iudor, y = n)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(prop, 1), "%")), vjust = -0.5) +
  labs(x = "Class", y = "Count", title = "Class Imbalance of DF 1") 
  ggsave("results/hormon_iudor_df1.png", hormon_iudor_df1) 

hormon_iudor_df2 <- df2_raw %>%
  count(hormon_iudor) %>%
  mutate(prop = n / sum(n) * 100) %>% 
  ggplot(aes(x = hormon_iudor, y = n)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(prop, 1), "%")), vjust = -0.5) +
  labs(x = "Class", y = "Count", title = "Class Imbalance of DF 2")
  ggsave("results/hormon_iudor_df2.png", hormon_iudor_df2) 

hormon_iudor_df3 <- df3_raw %>%
  count(hormon_iudor) %>%
  mutate(prop = n / sum(n) * 100) %>% 
  ggplot(aes(x = hormon_iudor, y = n)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(prop, 1), "%")), vjust = -0.5) +
  labs(x = "Class", y = "Count", title = "Class Imbalance of DF 3") 
  ggsave("results/hormon_iudor_df3.png", hormon_iudor_df3) 

hormon_iudor_df4 <- df4_raw %>%
  count(hormon_iudor) %>%
  mutate(prop = n / sum(n) * 100) %>% 
  ggplot(aes(x = hormon_iudor, y = n)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(prop, 1), "%")), vjust = -0.5) +
  labs(x = "Class", y = "Count", title = "Class Imbalance of DF 4")  
  ggsave("results/hormon_iudor_df4.png", hormon_iudor_df4) 
  
hormon_iudor_df1
hormon_iudor_df2
hormon_iudor_df3
hormon_iudor_df4
```

Based on these ratios:

df1: Slight imbalance, but not extreme. You might consider using class weights. df2: Significant imbalance. You should definitely use class weights or oversampling. df3: Slight imbalance, but not extreme. You might consider using class weights. df4: Almost balanced. No need for class weights or oversampling.

## Descriptive Stats (Final)

Descriptive Stats of the Final Dataframe

```{r}
# Descriptive Stats of the Final Dataframe
df_final_list <- list(df1_cleaned, df2_cleaned, df3_cleaned, df4_cleaned) # List of dataframes
source_names <- c("Birth cohort 1 (age 27)", "Birth cohort 2 (age 27)", 
                  "Birth cohort 2 (age 37)", "Birth cohort 3 (age 37)") # List of source names

DS_summary_final_continious <- data.frame()
DS_summary_final_categorical <- data.frame()


for(i in 1:length(df_final_list)) {
  DS_current <- datasummary_skim(df_final_list[[i]], type = "numeric", output = "data.frame")
  DS_current$Source <- source_names[i]
  DS_summary_final_continious <- rbind(DS_summary_final_continious, DS_current)
} # Loop over each dataframe


for(i in 1:length(df_final_list)) {
  DS_current <- datasummary_skim(df_final_list[[i]], type = "categorical", output = "data.frame")
  DS_current$Source <- source_names[i]
  DS_summary_final_categorical <- rbind(DS_summary_final_categorical, DS_current)
} # Loop over each dataframe

DS_summary_final_continious
DS_summary_final_categorical

write.csv(DS_summary_final_continious,
          "H:/oral_contraception_over_time/results/DS_summary_final_continious.csv")
write.csv(DS_summary_final_categorical,
          "H:/oral_contraception_over_time/results/DS_summary_final_categorical.csv")
```

## Correlation Matrix (Final)

Custom Function for creating Correlation Table

```{r}
#' correlation_matrix
#' Creates a publication-ready / formatted correlation matrix, using `Hmisc::rcorr` in the backend.
#'
#' @param df dataframe; containing numeric and/or logical columns to calculate correlations for
#' @param type character; specifies the type of correlations to compute; gets passed to `Hmisc::rcorr`; options are `"pearson"` or `"spearman"`; defaults to `"pearson"`
#' @param digits integer/double; number of decimals to show in the correlation matrix; gets passed to `formatC`; defaults to `3`
#' @param decimal.mark character; which decimal.mark to use; gets passed to `formatC`; defaults to `.`
#' @param use character; which part of the correlation matrix to display; options are `"all"`, `"upper"`, `"lower"`; defaults to `"all"`
#' @param show_significance boolean; whether to add `*` to represent the significance levels for the correlations; defaults to `TRUE`
#' @param replace_diagonal boolean; whether to replace the correlations on the diagonal; defaults to `FALSE`
#' @param replacement character; what to replace the diagonal and/or upper/lower triangles with; defaults to `""` (empty string)
#'
#' @return a correlation matrix
#' @export
#'
#' @examples
#' `correlation_matrix(iris)`
#' `correlation_matrix(mtcars)`
correlation_matrix <- function(df, 
                               type = "pearson",
                               digits = 3, 
                               decimal.mark = ".",
                               use = "all", 
                               show_significance = TRUE, 
                               replace_diagonal = FALSE, 
                               replacement = ""){
  
  # check arguments
  stopifnot({
    is.numeric(digits)
    digits >= 0
    use %in% c("all", "upper", "lower")
    is.logical(replace_diagonal)
    is.logical(show_significance)
    is.character(replacement)
  })
  # we need the Hmisc package for this
  require(Hmisc)
  
  # retain only numeric and boolean columns
  isNumericOrBoolean = vapply(df, function(x) is.numeric(x) | is.logical(x), logical(1))
  if (sum(!isNumericOrBoolean) > 0) {
    cat('Dropping non-numeric/-boolean column(s):', paste(names(isNumericOrBoolean)[!isNumericOrBoolean], collapse = ', '), '\n\n')
  }
  df = df[isNumericOrBoolean]
  
  # transform input data frame to matrix
  x <- as.matrix(df)
  
  # run correlation analysis using Hmisc package
  correlation_matrix <- Hmisc::rcorr(x, type = )
  R <- correlation_matrix$r # Matrix of correlation coeficients
  p <- correlation_matrix$P # Matrix of p-value 
  
  # transform correlations to specific character format
  Rformatted = formatC(R, format = 'f', digits = digits, decimal.mark = decimal.mark)
  
  # if there are any negative numbers, we want to put a space before the positives to align all
  if (sum(R < 0) > 0) {
    Rformatted = ifelse(R > 0, paste0(' ', Rformatted), Rformatted)
  }
  
  # add significance levels if desired
  if (show_significance) {
    # define notions for significance levels; spacing is important.
    stars <- ifelse(is.na(p), "   ", ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "*  ", "   "))))
    Rformatted = paste0(Rformatted, stars)
  }
  # build a new matrix that includes the formatted correlations and their significance stars
  Rnew <- matrix(Rformatted, ncol = ncol(x))
  rownames(Rnew) <- colnames(x)
  colnames(Rnew) <- paste(colnames(x), "", sep =" ")
  
  # replace undesired values
  if (use == 'upper') {
    Rnew[lower.tri(Rnew, diag = replace_diagonal)] <- replacement
  } else if (use == 'lower') {
    Rnew[upper.tri(Rnew, diag = replace_diagonal)] <- replacement
  } else if (replace_diagonal) {
    diag(Rnew) <- replacement
  }
  
  return(Rnew)
}

save_correlation_matrix = function(df, filename, ...) {
  write.csv2(correlation_matrix(df, ...), file = filename)
}
```

```{r}
setwd("H:/oral_contraception_over_time/")

# Correlation Table with Significance  (only for Continious variables)
correlation_table <- list(df1 = df1_cleaned, df2 = df2_cleaned, df3 = df3_cleaned, df4 = df4_cleaned) %>%
  imap(~ .x %>% 
         correlation_matrix(use = 'lower') %>%  
         as.data.frame() %>%
         mutate(df = .y)) %>%
  bind_rows()

write.csv(correlation_table, file = "results/correlation_table.csv")

```

```{r}
setwd("H:/oral_contraception_over_time/")

# Correlation Plot with Significance (only for Continious variables)
correlation_plot_df1 <- df1_cleaned %>%
  ggpairs(title = "Correlation & Scatterplot")
  ggsave("results/correlation_plot_df1.png", correlation_plot_df1, width = 20, height = 20)   
  
correlation_plot_df2 <- df2_cleaned %>%
  ggpairs(title = "Correlation & Scatterplot") 
  ggsave("results/correlation_plot_df2.png", correlation_plot_df2, width = 20, height = 20)   

correlation_plot_df3 <- df3_cleaned %>%
  ggpairs(title = "Correlation & Scatterplot") 
  ggsave("results/correlation_plot_df3.png", correlation_plot_df3, width = 20, height = 20)   
  
correlation_plot_df4 <- df4_cleaned %>%
  ggpairs(title = "Correlation & Scatterplot")
  ggsave("results/correlation_plot_df4.png", correlation_plot_df4, width = 20, height = 20)   
```

## Split Data

```{r}
# Split the data into training, validation and test data
set.seed(2024)
df1_split <- initial_split(df1_cleaned, prop = 0.80)
df1_train <- training(df1_split)
df1_folds <- vfold_cv(df1_train, v = 7, strata = hormon_iudor) # V-fold/k-fold cross-validation
df1_test <- testing(df1_split) 
  
set.seed(2024)
df2_split <- initial_split(df2_cleaned, prop = 0.80)
df2_train <- training(df2_split)
df2_folds <- vfold_cv(df2_train, v = 7, strata = hormon_iudor)
df2_test <- testing(df2_split) 

set.seed(2024)
df3_split <- initial_split(df3_cleaned, prop = 0.80)
df3_train <- training(df3_split)
df3_folds <- vfold_cv(df3_train, v = 7, strata = hormon_iudor)
df3_test <- testing(df3_split)

set.seed(2024)
df4_split <- initial_split(df4_cleaned, prop = 0.80)
df4_train <- training(df4_split)
df4_folds <- vfold_cv(df4_train, v = 7, strata = hormon_iudor)
df4_test <- testing(df4_split)
```

## Class Weights

```{r}
# Create Function to calculate classweights 
calculate_class_weights <- function(df_train) {
  class_counts <- table(df_train$hormon_iudor)
  total_samples <- sum(class_counts)
  num_classes <- length(class_counts)
  class_weights <- total_samples / (num_classes * class_counts)
  return(as.numeric(class_weights))
}

class_weights_df1 <- calculate_class_weights(df1_train)
class_weights_df2 <- calculate_class_weights(df2_train)
class_weights_df3 <- calculate_class_weights(df3_train)
class_weights_df4 <- calculate_class_weights(df4_train)

class_weights_df1
class_weights_df2
class_weights_df3
class_weights_df4


class_counts <- table(df1_train$hormon_iudor)
  total_samples <- sum(class_counts)
  num_classes <- length(class_counts)
  class_weights <- total_samples / (num_classes * class_counts)
```

# (1) Build: Normal R.F.

## i. Recipe - RF

```{r}
# Define a function to create the recipe
create_rf_recipe1 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors())     # remove variables that contain only single value
}

create_rf_recipe2 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health'))         # apply ordinal encoding (Ordinal variables)            
}

create_rf_recipe3 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health')) %>%     # apply ordinal encoding (Ordinal variables)            
    step_upsample(hormon_iudor, over_ratio = 1)   # creates synthetic data (UPSAMPLE) for Minority class
}

create_rf_recipe4 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health')) %>%     # apply ordinal encoding (Ordinal variables)            
    step_rose(hormon_iudor, over_ratio = 1)       # creates synthetic data (ROSE) for Minority class
}

create_rf_recipe5 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health')) %>%     # apply ordinal encoding (Ordinal variables)            
    step_smotenc(hormon_iudor, over_ratio = 1)      # creates synthetic data (SMOTE) for Minority class
}

create_rf_recipe6 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 'migback', 
                 'relstat', 'empl', 'ethni', 'region', 'addchild', 
                 'denomination', 'nkids', 'bmi_category', 
                 'rel', 'edu', 'health')) %>%     # apply one-hot encoding (All Categorical variables)
    step_upsample(hormon_iudor, over_ratio = 1)   # creates synthetic data (UPSAMPLE) for Minority class
}

create_rf_recipe7 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 'migback', 
                 'relstat', 'empl', 'ethni', 'region', 'addchild', 
                 'denomination', 'nkids', 'bmi_category', 
                 'rel', 'edu', 'health')) %>%     # apply one-hot encoding (All Categorical variables)
    step_rose(hormon_iudor, over_ratio = 1)       # creates synthetic data (ROSE) for Minority class
}

create_rf_recipe8 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_mutate(across(c('bmi_category', 'nkids', 'edu', 'rel', 'health'), ~ as.factor(as.character(.)))) %>%
    step_dummy(c('urban', 'sex_often', 'abortion', 'migback', 
                 'relstat', 'empl', 'ethni', 'region', 'addchild', 
                 'denomination', 'nkids', 'bmi_category', 
                 'rel', 'edu', 'health')) %>%     # apply one-hot encoding (All Categorical variables)
    step_smotenc(hormon_iudor, over_ratio = 1)      # creates synthetic data (SMOTE) for Minority class
}

create_rf_recipe9 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_upsample(hormon_iudor, over_ratio = 1)   # creates synthetic data (UPSAMPLE) for Minority class
}

create_rf_recipe10 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_mutate(across(where(is.ordered), as.factor)) %>% 
    step_rose(hormon_iudor, over_ratio = 1)   # creates synthetic data (ROSE) for Minority class
}

create_rf_recipe11 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_smotenc(hormon_iudor, over_ratio = 1)   # creates synthetic data (SMOTENC) for Minority class
}
```

Explaining the functions used for handling class-imbalance in the Recipies:

1.  `step_smotenc()`: This method generates new synthetic examples of the minority class using nearest neighbors. It's more sophisticated and can create more diverse samples, which may help in improving model performance and reducing overfitting. (But to use this, categorical variables has to be one-shot encoded)

2.  `step_upsample():` This method replicates rows of the minority class to balance the class distribution. It's straightforward and can be effective, but it might lead to overfitting as it simply duplicates existing data points.

3.  `step_rose():` This method generates a sample of synthetic data by enlarging the features space of minority and majority class examples. It selects an observation belonging to a class and generates new examples in its neighborhood determined by some matrix.

Extract the preprocessed training set from the prepared recipe

```{r}
# Extracting the preprocessed training set from the prepared recipe
df1_rf_train_prep <- create_rf_recipe2(df1_train) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))
df2_rf_train_prep <- create_rf_recipe5(df2_train) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))
df3_rf_train_prep <- create_rf_recipe2(df3_train) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))
df4_rf_train_prep <- create_rf_recipe2(df4_train) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))
```

```{r}
# Extract the preprocessed training set
df1_final <- create_rf_recipe2(df1_cleaned) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))
df2_final <- create_rf_recipe2(df2_cleaned) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))
df3_final <- create_rf_recipe2(df3_cleaned) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))
df4_final <- create_rf_recipe2(df4_cleaned) %>% prep() %>% juice() %>% 
    mutate(hormon_iudor = as.integer(as.character(hormon_iudor)))

# Save the preprocessed training set
setwd("H:/oral_contraception_over_time/data")
write.csv(df1_final, "df1_final.csv")
write.csv(df2_final, "df2_final.csv")
write.csv(df3_final, "df3_final.csv")
write.csv(df4_final, "df4_final.csv")

```

## ii. Model Specification

Standard Specification

```{r}
# Build rf_specification
rf_specification <- rand_forest(
  mtry = tune(),  # no. of variables that are candidates for splitting
  trees = tune(), # no. of decision trees included
  min_n = tune()  # no. of observations needed to keep Splitting 
  
  ) %>%
  set_mode("classification") %>%
  set_engine("ranger")
```

Weighted/Targeted Specification

```{r}
# Define rf_specification for each dataset with added classweights
rf_specification_df1 <- rand_forest(
  mtry = tune(),  # no. of variables that are candidates for splitting
  trees = tune(), # no. of decision trees included
  min_n = tune()  # no. of observations needed to keep Splitting 
  
  ) %>%
  set_mode("classification") %>%
  set_engine("ranger")

rf_specification_df2 <- rand_forest(
  mtry = tune(),  # no. of variables that are candidates for splitting
  trees = tune(), # no. of decision trees included
  min_n = tune()  # no. of observations needed to keep Splitting 
  
  ) %>%
  set_mode("classification") %>%
  set_engine("ranger")

rf_specification_df3 <- rand_forest(
  mtry = tune(),  # no. of variables that are candidates for splitting
  trees = tune(), # no. of decision trees included
  min_n = tune()  # no. of observations needed to keep Splitting 
  
  ) %>%
  set_mode("classification") %>%
  set_engine("ranger")

rf_specification_df4 <- rand_forest(
  mtry = tune(),  # no. of variables that are candidates for splitting
  trees = tune(), # no. of decision trees included
  min_n = tune()  # no. of observations needed to keep Splitting 
  
  ) %>%
  set_mode("classification") %>%
  set_engine("ranger")
```

## iii. Workflow definition

```{r}
# Choice of Recipe: "create_rf_recipe5"
set.seed(2024)

rf_workflow1 <- workflow() %>%
  add_recipe(create_rf_recipe2(df1_train)) %>% 
  add_model(rf_specification) 

rf_workflow2 <- workflow() %>%
  add_recipe(create_rf_recipe5(df2_train)) %>%
  add_model(rf_specification)

rf_workflow3 <- workflow() %>%
  add_recipe(create_rf_recipe2(df3_train)) %>%
  add_model(rf_specification)

rf_workflow4 <- workflow() %>%
  add_recipe(create_rf_recipe2(df4_train)) %>%
  add_model(rf_specification)
```

## RUN Hyperparameter Tuning

### 1st Tuning

```{r}
doParallel::registerDoParallel()

set.seed(2024)
# Dataframe 1
rf_tune_res1_df1 <- tune_grid(
  rf_workflow1,
  resamples = df1_folds,
  grid = 20
)
show_notes(.Last.tune.result)
saveRDS(rf_tune_res1_df1, "rds_objects/rf_recipe5_tune_res1_df1.rds")

# Dataframe 2 
set.seed(2024)
rf_tune_res1_df2 <- tune_grid(
  rf_workflow2,
  resamples = df2_folds,
  grid = 20
)   
show_notes(.Last.tune.result)
saveRDS(rf_tune_res1_df2, "rds_objects/rf_recipe5_tune_res1_df2.rds")

doParallel::registerDoParallel()
# Dataframe 3
set.seed(2024)
rf_tune_res1_df3 <- tune_grid(
  rf_workflow3,
  resamples = df3_folds,
  grid = 20
)
show_notes(.Last.tune.result)
saveRDS(rf_tune_res1_df3, "rds_objects/rf_recipe2_tune_res1_df3.rds")

# Dataframe 4
set.seed(2024)
rf_tune_res1_df4 <- tune_grid(
  rf_workflow4,
  resamples = df4_folds,
  grid = 20
)
show_notes(.Last.tune.result)
saveRDS(rf_tune_res1_df4, "rds_objects/rf_recipe5_tune_res1_df4.rds")
```

```{r}
# Load-up saved 1st tune objects
rf_tune_res1_df1 <- readRDS("rds_objects/rf_recipe2_tune_res1_df1.rds")
rf_tune_res1_df2 <- readRDS("rds_objects/rf_recipe5_tune_res1_df2.rds")
rf_tune_res1_df3 <- readRDS("rds_objects/rf_recipe2_tune_res1_df3.rds")
rf_tune_res1_df4 <- readRDS("rds_objects/rf_recipe2_tune_res1_df4.rds")
```

```{r}
# Show accuracy for different hyperparameters
rf_tune_res1_df1 %>%
  collect_metrics()

rf_tune_res1_df2 %>%
  collect_metrics()

rf_tune_res1_df3 %>%
  collect_metrics()

rf_tune_res1_df4 %>%
  collect_metrics()
```

```{r}
# Visualize accuracy for different hyperparameters

rf_tune_res1_df1 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% # keep ROC_AUC only, used for binary classification problems
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 1") +  
  labs(x = NULL, y = "AUC")

rf_tune_res1_df2 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 2") +  
  labs(x = NULL, y = "AUC")

rf_tune_res1_df3 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 3") +  
  labs(x = NULL, y = "AUC")

rf_tune_res1_df4 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 4") +  
  labs(x = NULL, y = "AUC")
```

Pick the range of values

```{r}
# Dataframe 1
rf_grid_df1 <- grid_regular(
  min_n(range = c(5, 30)), # range for min number of observations needed to keep Splitting 
  mtry(range = c(5, 37)),   # range for no. of variables candidates for splitting at each node
  trees(range = c(500, 1750)),# range for no. trees
  levels = 6  # number of values of each parameter to use to make the regular grid
)

# Dataframe 2
rf_grid_df2 <- grid_regular(
  min_n(range = c(10, 35)),
  mtry(range = c(1, 20)),  
  trees(range = c(50, 2000)),
  levels = 6 
)

# Dataframe 3
rf_grid_df3 <- grid_regular(
  min_n(range = c(1, 20)),
  mtry(range = c(5, 35)),
  trees(range = c(250, 2000)),
  levels = 6 
)

# Dataframe 4
rf_grid_df4 <- grid_regular(
  min_n(range = c(1, 15)),
  mtry(range = c(1, 15)),
  trees(range = c(500, 1750)),
  levels = 6
)
```

### 2nd Tunning

Re-do the tuning using those values:

```{r}
doParallel::registerDoParallel()

# Dataframe 1
set.seed(2024)
rf_tune_res2_df1 <- tune_grid(
  rf_workflow1,
  resamples = df1_folds,
  grid = rf_grid_df1 #, control = control_resamples(save_pred = TRUE)
)
show_notes(.Last.tune.result)
saveRDS(rf_tune_res2_df1, file = "rds_objects/rf_recipe5_tune_res2_df1.rds")

# Dataframe 2
set.seed(2024)
rf_tune_res2_df2 <- tune_grid(
  rf_workflow2,
  resamples = df2_folds,
  grid = rf_grid_df2
)
show_notes(.Last.tune.result)
saveRDS(rf_tune_res2_df2, file = "rds_objects/rf_recipe5_tune_res2_df2.rds")

doParallel::registerDoParallel()
# Dataframe 3
set.seed(2024)
rf_tune_res2_df3 <- tune_grid(
  rf_workflow3,
  resamples = df3_folds,
  grid = rf_grid_df3
)
show_notes(.Last.tune.result)
saveRDS(rf_tune_res2_df3, file = "rds_objects/rf_recipe2_tune_res2_df3.rds")

# Dataframe 4
rf_tune_res2_df4 <- tune_grid(
  rf_workflow4,
  resamples = df4_folds,
  grid = rf_grid_df4
)
show_notes(.Last.tune.result)
saveRDS(rf_tune_res2_df4, file = "rds_objects/rf_recipe5_tune_res2_df4.rds")
```

```{r}
rf_tune_res2_df1 <- readRDS("rds_objects/rf_recipe2_tune_res2_df1.rds")
rf_tune_res2_df2 <- readRDS("rds_objects/rf_recipe5_tune_res2_df2.rds")
rf_tune_res2_df3 <- readRDS("rds_objects/rf_recipe2_tune_res2_df3.rds")
rf_tune_res2_df4 <- readRDS("rds_objects/rf_recipe2_tune_res2_df4.rds")
```

### Random Grid search

```{r}
set.seed(2024)
random_grid <- grid_random(mtry(c(1, ceiling(sqrt(37)))),
                                  trees(c(100, 1000)),
                                  min_n(c(1,20)), 
                                  size = 100) # size of parameters combination

rf_tune_results <- tune_grid(
  rf_workflow3,
  resamples = df3_folds,
  grid = rf_tune_random_df3,
  metrics = metric_set(roc_auc, accuracy, f_meas)
  )
show_notes(.Last.tune.result)
saveRDS(rf_tune_random_df3, file = "rds_objects/rf_tune_random_df3.rds")

# Select best
best_auc_rf_df3 <- select_best(rf_tune_random_df3, "roc_auc")


```

### Evaulate Tuning

```{r}
# Visualize roc_auc for different hyperparameters

rf_tune_res2_df1 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 1") +  
  labs(x = NULL, y = "AUC")

rf_tune_res2_df2 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 2") +  
  labs(x = NULL, y = "AUC")

rf_tune_res2_df3 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 3") +  
  labs(x = NULL, y = "AUC")

rf_tune_res2_df4 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, min_n, mtry, trees) %>%
  pivot_longer(min_n:trees,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 4") +  
  labs(x = NULL, y = "AUC")
```

### Select Best Hyperparameters

```{r}
best_auc_rf_df1 <- select_best(rf_tune_res2_df1, "roc_auc")
best_auc_rf_df2 <- select_best(rf_tune_res2_df2, "roc_auc")
best_auc_rf_df3 <- select_best(rf_tune_res2_df3, "roc_auc")
best_auc_rf_df4 <- select_best(rf_tune_res2_df4, "roc_auc")

best_auc_rf_df1
best_auc_rf_df2
best_auc_rf_df3
best_auc_rf_df4
```

## RUN Training

REMEMBER: Change to the desired 'RECIPE' !!!!!!!!!!!!!!!!!

```{r}
### REMEMBER: Change to the desired 'RECIPE' !!!!!!!!!!!!!!!!!
set.seed(2024)

# Data Frame 1
rf_workflow_final_df1 <- workflow() %>%
  add_recipe(create_rf_recipe2(df1_train)) %>%
  add_model(rand_forest(mtry = best_auc_rf_df1$mtry,
                        trees = best_auc_rf_df1$trees,
                        min_n = best_auc_rf_df1$min_n ) %>%
    set_mode("classification") %>%
    set_engine("ranger", importance = 'permutation')  )

fit_rf_train_df1 <- fit(rf_workflow_final_df1, data = df1_train) # Fit onto Training Data
#saveRDS(fit_rf_train_df1, file = "rds_objects/fit_recipe8_rf_train_df1.rds")

# Data Frame 2
rf_workflow_final_df2 <- workflow() %>% # Define final workflow
  add_recipe(create_rf_recipe2(df2_train)) %>%
  add_model(rand_forest(mtry = best_auc_rf_df2$mtry,
                        trees = best_auc_rf_df2$trees,
                        min_n = best_auc_rf_df2$min_n ) %>%
    set_mode("classification") %>%
    set_engine("ranger", importance = 'permutation')  )

fit_rf_train_df2 <- fit(rf_workflow_final_df2, data = df2_train) # Fit onto Training Data
#saveRDS(fit_rf_train_df2, file = "rds_objects/fit_recipe8_rf_train_df2.rds")

# Data Frame 3
rf_workflow_final_df3 <- workflow() %>% # Define final workflow
  add_recipe(create_rf_recipe2(df3_train)) %>%
  add_model(rand_forest(mtry = best_auc_rf_df3$mtry,
                        trees = best_auc_rf_df3$trees,
                        min_n = best_auc_rf_df3$min_n ) %>%
    set_mode("classification") %>%
    set_engine("ranger", importance = 'permutation')  )

fit_rf_train_df3 <- fit(rf_workflow_final_df3, data = df3_train) # Fit onto Training Data
#saveRDS(fit_rf_train_df3, file = "rds_objects/fit_recipe2_rf_train_df3.rds")

# Data Frame 4
rf_workflow_final_df4 <- workflow() %>% # Define final workflow
  add_recipe(create_rf_recipe2(df4_train)) %>%
  add_model(rand_forest(mtry = best_auc_rf_df4$mtry,
                        trees = best_auc_rf_df4$trees,
                        min_n = best_auc_rf_df4$min_n ) %>%
    set_mode("classification") %>%
    set_engine("ranger", importance = 'permutation')  )

fit_rf_train_df4 <- fit(rf_workflow_final_df4, data = df4_train) # Fit onto Training Data
#saveRDS(fit_rf_train_df4, file = "rds_objects/fit_recipe8_rf_train_df4.rds")
```

### Load Fitted Model

```{r}
setwd("H:/oral_contraception_over_time/code/r/")
#setwd("C:/Users/Bryan Chan/Documents/Projects/oral_contraception_over_time/code/r/")

fit_rf_train_df1 <- readRDS("rds_objects/fit_recipe2_rf_train_df1.rds")
fit_rf_train_df2 <- readRDS("rds_objects/fit_recipe5_rf_train_df2.rds")
fit_rf_train_df3 <- readRDS("rds_objects/fit_recipe2_rf_train_df3.rds")
fit_rf_train_df4 <- readRDS("rds_objects/fit_recipe2_rf_train_df4.rds")
```

### Metrics

Evaluate the Training data

#### Plots

```{r}
#Plot Confusion matrix
plot_Confusion_Matrix <- function(recipe, model_type, model_type_Short,
                                  fit1, fit2, fit3, fit4, 
                                  data1, data2, data3, data4) {
  cm1 <- augment(fit1, new_data = data1) %>%
    conf_mat(truth = hormon_iudor, estimate = .pred_class) %>% 
    autoplot(type = "heatmap") +
    labs(title = paste("Confusion Matrix (", model_type, ") - ", recipe, sep = ""),
         subtitle = "Data Frame 1")
  cm2 <- augment(fit2, new_data = data2) %>%
    conf_mat(truth = hormon_iudor, estimate = .pred_class) %>% 
    autoplot(type = "heatmap") +
    labs(title = "", 
         subtitle = "Data Frame 2")
  cm3 <- augment(fit3, new_data = data3) %>%
    conf_mat(truth = hormon_iudor, estimate = .pred_class) %>% 
    autoplot(type = "heatmap") +
    labs(title = "", 
         subtitle = "Data Frame 3")
  cm4 <- augment(fit4, new_data = data4) %>%
    conf_mat(truth = hormon_iudor, estimate = .pred_class) %>% 
    autoplot(type = "heatmap") +
    labs(title = "", 
         subtitle = "Data Frame 4")
  
  confusion_matrix <- gridExtra::grid.arrange(cm1, cm2, cm3, cm4, ncol = 2)
  
  ggsave(paste("confusion_matrix_", model_type_Short, recipe, ".png", sep = ""), 
         confusion_matrix, width = 10, height = 10)
}

setwd("H:/oral_contraception_over_time/results")
plot_Confusion_Matrix("recipe2&5", "Random Forest", "rf_",
                      fit_rf_train_df1, fit_rf_train_df2, 
                      fit_rf_train_df3, fit_rf_train_df4,
                      df1_train, df2_train, df3_train, df4_train)


```

```{r}
# Plot Distribution of Predicted Probabilities
plot_probabilities_distribution <- function(recipe, model_type, model_type_Short,
                                            fit1, fit2, fit3, fit4, 
                                            data1, data2, data3, data4) {
  p1 <- augment(fit1, new_data = data1) %>% 
    ggplot(aes(.pred_1, fill = hormon_iudor)) +
    geom_density(alpha = 0.5) +
    labs(title = paste("Distribution of Predicted Probabilities of Hormonal Contraceptive Usage (",
                       model_type, ") - ", recipe, sep = ""),
         subtitle = "Data Frame 1",
         x = "Predicted Probability", y = "Count") +
    scale_x_continuous(limits = c(0, 1)) +
    geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal() +
  scale_fill_discrete(name = "Target Variable") + theme(legend.position="bottom")

  p2 <- augment(fit2, new_data = data2) %>% 
    ggplot(aes(.pred_1, fill = hormon_iudor)) +
    geom_density(alpha = 0.5) +
    labs(title = "", 
         subtitle = "Data Frame 2",
         x = "Predicted Probability", y = "Count") +
    scale_x_continuous(limits = c(0, 1)) +
    geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal() +
  scale_fill_discrete(name = "Target Variable") + theme(legend.position="bottom")

  p3 <- augment(fit3, new_data = data3) %>%
    ggplot(aes(.pred_1, fill = hormon_iudor)) +
    geom_density(alpha = 0.5) +
    labs(title = "",
         subtitle = "Data Frame 3",
         x = "Predicted Probability", y = "Count") +
    scale_x_continuous(limits = c(0, 1)) +
    geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal() +
  scale_fill_discrete(name = "Target Variable") + theme(legend.position="bottom")
  
  p4 <- augment(fit4, new_data = data4) %>%
    ggplot(aes(.pred_1, fill = hormon_iudor)) +
    geom_density(alpha = 0.5) +
    labs(title = "",
         subtitle = "Data Frame 4",
         x = "Predicted Probability", y = "Count") +
    scale_x_continuous(limits = c(0, 1)) +
    geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal() +
  scale_fill_discrete(name = "Target Variable") + theme(legend.position="bottom")
  
  preProb_distribution <- gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)

  ggsave(paste("preProb_distribution_", model_type_Short, recipe, ".png", sep = ""), 
         preProb_distribution, width = 10, height = 10)
}

setwd("H:/oral_contraception_over_time/results")
plot_probabilities_distribution("recipe2&5", "Random Forest", "rf_",
                                fit_rf_train_df1, fit_rf_train_df2,
                                fit_rf_train_df3, fit_rf_train_df4,
                                df1_train, df2_train, df3_train, df4_train)
```

```{r}
# Plot ROC Curve for Random Forest
plot_roc_curves_RF <- function(recipe) {
  roc_curve_train_df1 <- augment(fit_rf_train_df1, new_data = df1_train) %>%
    roc_curve(truth = hormon_iudor, .pred_1, event_level = "second") %>%
    ggplot(aes(x = 1 - specificity, y = sensitivity)) +
    geom_line() +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
    labs(title = paste("ROC Curve - ", recipe, sep = " "), 
         subtitle = "Data Frame 1", 
         x = "False Positive Rate", y = "True Positive Rate")

  roc_curve_train_df2 <- augment(fit_rf_train_df2, new_data = df2_train) %>%
    roc_curve(truth = hormon_iudor, .pred_1, event_level = "second") %>%
    ggplot(aes(x = 1 - specificity, y = sensitivity)) +
    geom_line() +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
    labs(title = "", 
         subtitle = "Data Frame 2", 
         x = "False Positive Rate", y = "True Positive Rate")

  roc_curve_train_df3 <- augment(fit_rf_train_df3, new_data = df3_train) %>%
    roc_curve(truth = hormon_iudor, .pred_1, event_level = "second") %>%
    ggplot(aes(x = 1 - specificity, y = sensitivity)) +
    geom_line() +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
    labs(title = "", 
         subtitle = "Data Frame 3", 
         x = "False Positive Rate", y = "True Positive Rate")

  roc_curve_train_df4 <- augment(fit_rf_train_df4, new_data = df4_train) %>%
    roc_curve(truth = hormon_iudor, .pred_1, event_level = "second") %>%
    ggplot(aes(x = 1 - specificity, y = sensitivity)) +
    geom_line() +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
    labs(title = "", 
         subtitle = "Data Frame 4", 
         x = "False Positive Rate", y = "True Positive Rate")
  
  roc_curve <- gridExtra::grid.arrange(roc_curve_train_df1, roc_curve_train_df2, 
                          roc_curve_train_df3, roc_curve_train_df4, ncol = 2)
  
  ggsave(paste("roc_curve_rf_", recipe, ".png", sep = ""), roc_curve, width = 10, height = 10)
}

setwd("H:/oral_contraception_over_time/results")
plot_roc_curves_RF(recipe = "recipe9")
```

#### Table of Metrics

```{r}
# MN: add metric set
metrics_combined <- yardstick::metric_set(yardstick::accuracy,
                                          yardstick::precision,
                                          yardstick::recall,
                                          yardstick::f_meas)

# Function to calculate metrics
calc_metrics <- function(df, fit) {
  augment(fit, new_data = df) %>%
    metrics_combined(truth = hormon_iudor, 
                     estimate = .pred_class, 
                     event_level = "second") %>%
    bind_rows(augment(fit, new_data = df) %>% 
                yardstick::roc_auc(truth = hormon_iudor, .pred_1,
                                   event_level = "second"))
}
```

```{r}
# Get the metrics of Trained Model - RF
df_train_list <- list(df1 = df1_train, df2 = df2_train, 
                      df3 = df3_train, df4 = df4_train) # Create a list of data frames

fit_rf_list <- list(fit_rf_train_df1, fit_rf_train_df2, 
                    fit_rf_train_df3, fit_rf_train_df4) # Create a list of models

purrr::map2_df(df_train_list,
                 fit_rf_list,
                 calc_metrics, .id = "DF")
```

## SHAP

SHAP (SHapley Additive exPlanations).

### Kernel SHAP

Type 1: Calculate SHAP values with Kernelshap()

```{r}
# Kernel SHAP values
set.seed(2024)
kernelshap_df1 <- kernelshap(fit_rf_train_df1,
                             X = df1_train[, -ncol(df1_train)],
                             bg_X = df1_train)
saveRDS(kernelshap_df1, file = "kernelshap_recipe5_df1.rds")

set.seed(2024)
kernelshap_df2 <- kernelshap(fit_rf_train_df2,
                             X = df2_train[, -ncol(df2_train)],
                             bg_X = df2_train)
saveRDS(kernelshap_df2, file = "kernelshap_recipe5_df2.rds")

set.seed(2024)
kernelshap_df3 <- kernelshap(fit_rf_train_df3,
                             X = df3_train[, -ncol(df3_train)],
                             bg_X = df3_train)
saveRDS(kernelshap_df3, file = "kernelshap_recipe5_df3.rds")

set.seed(2024)
kernelshap_df4 <- kernelshap(fit_rf_train_df4,
                             X = df4_train[, -ncol(df4_train)],
                             bg_X = df4_train)
saveRDS(kernelshap_df4, file = "kernelshap_recipe5_df4.rds")
```

Warning: Non-convergence for 40 rows. The warning indicates that the algorithm did not converge (reach a stable solution) for 40 rows in the background data.

Why Does This Happen? There could be a few reasons: Limited Data, Complex Interactions OR Computational Complexity

Is this warning a major concern or can it be disregarded? Small number of non-converging rows: If only a small portion (less than 5% or so) of the background data has convergence issues (like 40 rows out of a large dataset), it might not significantly impact the overall SHAP value estimates. Large number of non-converging rows: If a significant portion of the background data (more than 10%) experiences non-convergence, the SHAP values might be unreliable.

```{r}
kernelshap_df1 <- readRDS("rds_objects/kernelshap_recipe5_df1.rds")
kernelshap_df2 <- readRDS("rds_objects/kernelshap_recipe5_df2.rds")
kernelshap_df3 <- readRDS("rds_objects/kernelshap_recipe5_df3.rds")
kernelshap_df4 <- readRDS("rds_objects/kernelshap_recipe5_df4.rds")
```

### Tree SHAP

Type 2: Calculate SHAP values with Treeshap()

```{r}
# Evaluate metrics of choosen Hyperparameters
library(yardstick)
metrics_combined <- metric_set(accuracy, f_meas)

rf_model_df1 <- ranger(  # Unify Ranger model
  formula = hormon_iudor ~ ., 
  data = df1_rf_train_prep, 
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df1$trees, 
  mtry = best_auc_rf_df1$mtry,
  min.node.size = best_auc_rf_df1$min_n) 
pred_df1 <- df1_rf_train_prep %>%
  mutate(.pred_class = as.factor(predict(rf_model_df1, data = .)$predictions), hormon_iudor = as.factor(hormon_iudor)) %>% 
  select(hormon_iudor, .pred_class)
metrics_combined(pred_df1, truth = hormon_iudor, estimate = .pred_class, event_level = "second")

rf_model_df2 <- ranger(  # Unify Ranger model
  formula = hormon_iudor ~ ., 
  data = df2_rf_train_prep, 
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df2$trees, 
  mtry = best_auc_rf_df2$mtry,
  min.node.size = best_auc_rf_df2$min_n)
pred_df2 <- df2_rf_train_prep %>%
  mutate(.pred_class = as.factor(predict(rf_model_df2, data = .)$predictions), hormon_iudor = as.factor(hormon_iudor)) %>% 
  select(hormon_iudor, .pred_class)
metrics_combined(pred_df2, truth = hormon_iudor, estimate = .pred_class, event_level = "second")

rf_model_df3 <- ranger(  # Unify Ranger model
  formula = hormon_iudor ~ ., 
  data = df3_rf_train_prep,  
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df3$trees, 
  mtry = best_auc_rf_df3$mtry,
  min.node.size = best_auc_rf_df3$min_n)
pred_df3 <- df3_rf_train_prep %>%
  mutate(.pred_class = as.factor(predict(rf_model_df3, data = .)$predictions), hormon_iudor = as.factor(hormon_iudor)) %>% 
  select(hormon_iudor, .pred_class)
metrics_combined(pred_df3, truth = hormon_iudor, estimate = .pred_class, event_level = "second")

rf_model_df4 <- ranger(  # Unify Ranger model
  formula = hormon_iudor ~ ., 
  data = df4_rf_train_prep, 
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df4$trees, 
  mtry = best_auc_rf_df4$mtry,
  min.node.size = best_auc_rf_df4$min_n)
pred_df4 <- df4_rf_train_prep %>%
  mutate(.pred_class = as.factor(predict(rf_model_df4, data = .)$predictions), hormon_iudor = as.factor(hormon_iudor)) %>% 
  select(hormon_iudor, .pred_class)
metrics_combined(pred_df4, truth = hormon_iudor, estimate = .pred_class, event_level = "second")
```

```{r}
# df1
unified_rf_model_df1 <- ranger(  # Unify Ranger model
  formula = hormon_iudor ~ ., 
  data = df1_rf_train_prep, 
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df1$trees, 
  mtry = best_auc_rf_df1$mtry,
  min.node.size = best_auc_rf_df1$min_n) %>% 
  ranger.unify(df1_rf_train_prep) 

set.seed(2024)
treeshap_rf_df1 <- treeshap(unified_rf_model_df1,  # treeshap
                         x = df1_rf_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_rf_df1, file = "rds_objects/treeshap_rf_df1.rds")
  
# df2
unified_rf_model_df2 <- ranger( 
  formula = hormon_iudor ~ ., 
  data = df2_rf_train_prep, 
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df2$trees, 
  mtry = best_auc_rf_df2$mtry,
  min.node.size = best_auc_rf_df2$min_n) %>% 
  ranger.unify(df2_rf_train_prep) 

set.seed(2024)
treeshap_rf_df2 <- treeshap(unified_rf_model_df2,  
                         x = df2_rf_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_rf_df2, file = "rds_objects/treeshap_rf_df2.rds")
  
# df3
set.seed(2024)
unified_rf_model_df3 <- ranger(  
  formula = hormon_iudor ~ ., 
  data = df3_rf_train_prep, 
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df3$trees, 
  mtry = best_auc_rf_df3$mtry,
  min.node.size = best_auc_rf_df3$min_n) %>% 
  ranger.unify(df3_rf_train_prep) 

set.seed(2024)
treeshap_rf_df3 <- treeshap(unified_rf_model_df3,  
                         x = df3_rf_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_rf_df3, file = "rds_objects/treeshap_rf_df3.rds")
  
# df4
unified_rf_model_df4 <- ranger(  
  formula = hormon_iudor ~ ., 
  data = df4_rf_train_prep, 
  importance = 'permutation', classification = TRUE,
  num.trees = best_auc_rf_df4$trees, 
  mtry = best_auc_rf_df4$mtry,
  min.node.size = best_auc_rf_df4$min_n) %>% 
  ranger.unify(df4_rf_train_prep) 

set.seed(2024)
treeshap_rf_df4 <- treeshap(unified_rf_model_df4,  
                         x = df4_rf_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_rf_df4, file = "rds_objects/treeshap_rf_df4.rds")
```

```{r}
# Load up saved Treeshap treeshap_df1
treeshap_rf_df1 <- readRDS(file = "rds_objects/treeshap_rf_df1.rds")
treeshap_rf_df2 <- readRDS(file = "rds_objects/treeshap_rf_df2.rds") 
treeshap_rf_df3 <- readRDS(file = "rds_objects/treeshap_rf_df3.rds")
treeshap_rf_df4 <- readRDS(file = "rds_objects/treeshap_rf_df4.rds")
```

### RFE

Recursive Feature Elimination

```{r}
# Function to perform cross-validation and calculate metrics
cross_val_scores <- function(model, data, target, cv = 5) {
  folds <- vfold_cv(data, v = cv, strata = target)
  
  metrics <- f_meas
  
  scores <- map(folds$splits, ~ {
    train_data <- analysis(.x)
    test_data <- assessment(.x)
    
    fit <- fit(model, data = train_data)
    predictions <- predict(fit, test_data) %>%
      bind_cols(test_data) %>%
      metrics(truth = !!sym(target), estimate = .pred_class, 
                     event_level = "second")
  }) %>% bind_rows()
  
  scores_summary <- scores %>%
    group_by(.metric) %>%
    summarize(mean = mean(.estimate), .groups = 'drop')
  
  return(scores_summary)
}

# Prepare Dataset for RFE
df1_rf_train_prep_RFE <- create_rf_recipe2(df1_train) %>% prep() %>% juice() 
df2_rf_train_prep_RFE <- create_rf_recipe5(df2_train) %>% prep() %>% juice() 
df3_rf_train_prep_RFE <- create_rf_recipe2(df3_train) %>% prep() %>% juice() 
df4_rf_train_prep_RFE <- create_rf_recipe2(df4_train) %>% prep() %>% juice()

# Define our Predictor Variables
variables <- df1_rf_train_prep_RFE %>% select(-hormon_iudor) %>% colnames 
```

RFE - DF 1

```{r}
set.seed(2024)
# Define Features & Target Variable
feature_names <- colnames(df1_rf_train_prep_RFE)[-ncol(df1_rf_train_prep_RFE)]
target_variable <- "hormon_iudor"

# Extract SHAP values
shap_values <- as.data.frame(treeshap_rf_df1$shaps)
shap_absmean <- colMeans(abs(shap_values))

# Create Null Sets
X_rfe <- df1_rf_train_prep_RFE[, feature_names]
f_meas_scores_df1 <- c()
features_eliminated_df1 <- c()

# Create a final model specification with the best hyperparameters
rf_spec <- rand_forest(
  mtry = best_auc_rf_df1$mtry,
  trees = best_auc_rf_df1$trees,
  min_n = best_auc_rf_df1$min_n
) %>%
  set_mode("classification") %>%
  set_engine("ranger", importance = 'permutation')

# Recursive Feature Elimination (RFE)
while (length(feature_names) > 0) {
  # Combine features and target variable for current iteration
  current_data <- df1_rf_train_prep_RFE %>%
    select(all_of(feature_names), all_of(target_variable))
  
  rf_workflow <- workflow() %>%
    add_recipe(recipe(as.formula(paste(target_variable, "~ .")), data = current_data)) %>%
    add_model(rf_spec)
  
  # Perform cross-validation
  scores <- cross_val_scores(rf_workflow, current_data, target_variable)
  
  # Store metrics
  f_meas_scores_df1 <- c(f_meas_scores_df1, scores$mean[scores$.metric == 'f_meas'])
  
  # Identify and remove the least important feature
  least_imp_index <- which.min(shap_absmean)
  feature_to_remove <- feature_names[least_imp_index]
  
  X_rfe <- X_rfe %>% select(-all_of(feature_to_remove))
  features_eliminated_df1 <- c(features_eliminated_df1, feature_to_remove)
  feature_names <- feature_names[-least_imp_index]
  shap_absmean <- shap_absmean[-least_imp_index]
}


# Create a data frame to store results
RFE_results_df1 <- data.frame(
  num_features = seq(length(features_eliminated_df1)),
  f_meas = f_meas_scores_df1
)

# Plot the RFE results
RFE_performance_df1 <- ggplot(RFE_results_df1, aes(x = num_features)) +
  geom_line(aes(y = f_meas)) +
  labs(y = "f_meas Score", x = "Number of Features Eliminated",
       title = "RFE Performance Metrics - DF 1") +
  scale_x_continuous(breaks = seq(min(RFE_results_df1$num_features), 
                                  max(RFE_results_df1$num_features), by = 2)) +
  #scale_y_continuous(limits = c(0.5, 0.9)) +
  theme_minimal()
setwd("H:/oral_contraception_over_time/results")
ggsave("RFE_performance_df1.png", RFE_performance_df1, width = 10, height = 7)
```

RFE - DF 2

```{r}
set.seed(2024)
# Define Features & Target Variable
feature_names <- colnames(df2_rf_train_prep_RFE)[-ncol(df2_rf_train_prep_RFE)]
target_variable <- "hormon_iudor"

# Extract SHAP values
shap_values <- as.data.frame(treeshap_rf_df2$shaps)
shap_absmean <- colMeans(abs(shap_values))

# Create Null Sets
X_rfe <- df2_rf_train_prep_RFE[, feature_names]
f_meas_scores_df2 <- c()
features_eliminated_df2 <- c()

# Create a final model specification with the best hyperparameters
rf_spec <- rand_forest(
  mtry = best_auc_rf_df2$mtry,
  trees = best_auc_rf_df2$trees,
  min_n = best_auc_rf_df2$min_n
) %>%
  set_mode("classification") %>%
  set_engine("ranger", importance = 'permutation')

# Recursive Feature Elimination (RFE)
while (length(feature_names) > 0) {
  # Combine features and target variable for current iteration
  current_data <- df2_rf_train_prep_RFE %>%
    select(all_of(feature_names), all_of(target_variable))
  
  rf_workflow <- workflow() %>%
    add_recipe(recipe(as.formula(paste(target_variable, "~ .")), data = current_data)) %>%
    add_model(rf_spec)
  
  # Perform cross-validation
  scores <- cross_val_scores(rf_workflow, current_data, target_variable)
  
  # Store metrics
  f_meas_scores_df2 <- c(f_meas_scores_df2, scores$mean[scores$.metric == 'f_meas'])
  
  # Identify and remove the least important feature
  least_imp_index <- which.min(shap_absmean)
  feature_to_remove <- feature_names[least_imp_index]
  
  X_rfe <- X_rfe %>% select(-all_of(feature_to_remove))
  features_eliminated_df2 <- c(features_eliminated_df2, feature_to_remove)
  feature_names <- feature_names[-least_imp_index]
  shap_absmean <- shap_absmean[-least_imp_index]
}


# Create a data frame to store results
RFE_results_df2 <- data.frame(
  num_features = seq(length(features_eliminated_df2)),
  f_meas = f_meas_scores_df2
)

# Plot the RFE results
RFE_performance_df2 <- ggplot(RFE_results_df2, aes(x = num_features)) +
  geom_line(aes(y = f_meas)) +
  labs(y = "f_meas Score", x = "Number of Features Eliminated",
       title = "RFE Performance Metrics - DF 2") +
  scale_x_continuous(breaks = seq(min(RFE_results_df2$num_features), 
                                  max(RFE_results_df2$num_features), by = 2)) +
  #scale_y_continuous(limits = c(0.5, 0.9)) +
  theme_minimal()
setwd("H:/oral_contraception_over_time/results")
ggsave("RFE_performance_df2.png", RFE_performance_df2, width = 10, height = 7)
```

RFE - DF 3

```{r}
set.seed(2024)
# Define Features & Target Variable
feature_names <- colnames(df3_rf_train_prep_RFE)[-ncol(df3_rf_train_prep_RFE)]
target_variable <- "hormon_iudor"

# Extract SHAP values
shap_values <- as.data.frame(treeshap_rf_df3$shaps)
shap_absmean <- colMeans(abs(shap_values))

# Create Null Sets
X_rfe <- df3_rf_train_prep_RFE[, feature_names]
f_meas_scores_df3 <- c()
features_eliminated_df3 <- c()

# Create a final model specification with the best hyperparameters
rf_spec <- rand_forest(
  mtry = best_auc_rf_df3$mtry,
  trees = best_auc_rf_df3$trees,
  min_n = best_auc_rf_df3$min_n
) %>%
  set_mode("classification") %>%
  set_engine("ranger", importance = 'permutation')

# Recursive Feature Elimination (RFE)
while (length(feature_names) > 0) {
  # Combine features and target variable for current iteration
  current_data <- df3_rf_train_prep_RFE %>%
    select(all_of(feature_names), all_of(target_variable))
  
  rf_workflow <- workflow() %>%
    add_recipe(recipe(as.formula(paste(target_variable, "~ .")), data = current_data)) %>%
    add_model(rf_spec)
  
  # Perform cross-validation
  scores <- cross_val_scores(rf_workflow, current_data, target_variable)
  
  # Store metrics
  f_meas_scores_df3 <- c(f_meas_scores_df3, scores$mean[scores$.metric == 'f_meas'])
  
  # Identify and remove the least important feature
  least_imp_index <- which.min(shap_absmean)
  feature_to_remove <- feature_names[least_imp_index]
  
  X_rfe <- X_rfe %>% select(-all_of(feature_to_remove))
  features_eliminated_df3 <- c(features_eliminated_df3, feature_to_remove)
  feature_names <- feature_names[-least_imp_index]
  shap_absmean <- shap_absmean[-least_imp_index]
}


# Create a data frame to store results
RFE_results_df3 <- data.frame(
  num_features = seq(length(features_eliminated_df3)),
  f_meas = f_meas_scores_df3
)

# Plot the RFE results
RFE_performance_df3 <- ggplot(RFE_results_df3, aes(x = num_features)) +
  geom_line(aes(y = f_meas)) +
  labs(y = "f_meas Score", x = "Number of Features Eliminated",
       title = "RFE Performance Metrics - DF 3") +
  scale_x_continuous(breaks = seq(min(RFE_results_df3$num_features), 
                                  max(RFE_results_df3$num_features), by = 2)) +
  #scale_y_continuous(limits = c(0.5, 0.9)) +
  theme_minimal()

setwd("H:/oral_contraception_over_time/results")
ggsave("RFE_performance_df3.png", RFE_performance_df3, width = 10, height = 7)
```

RFE - DF 4

```{r}
set.seed(2024)
# Define Features & Target Variable
feature_names <- colnames(df4_rf_train_prep_RFE)[-ncol(df4_rf_train_prep_RFE)]
target_variable <- "hormon_iudor"

# Extract SHAP values
shap_values <- as.data.frame(treeshap_rf_df4$shaps)
shap_absmean <- colMeans(abs(shap_values))

# Create Null Sets
X_rfe <- df4_rf_train_prep_RFE[, feature_names]
f_meas_scores_df4 <- c()
features_eliminated_df4 <- c()

# Create a final model specification with the best hyperparameters
rf_spec <- rand_forest(
  mtry = best_auc_rf_df4$mtry,
  trees = best_auc_rf_df4$trees,
  min_n = best_auc_rf_df4$min_n
) %>%
  set_mode("classification") %>%
  set_engine("ranger", importance = 'permutation')

# Recursive Feature Elimination (RFE)
while (length(feature_names) > 0) {
  # Combine features and target variable for current iteration
  current_data <- df4_rf_train_prep_RFE %>%
    select(all_of(feature_names), all_of(target_variable))
  
  rf_workflow <- workflow() %>%
    add_recipe(recipe(as.formula(paste(target_variable, "~ .")), data = current_data)) %>%
    add_model(rf_spec)
  
  # Perform cross-validation
  scores <- cross_val_scores(rf_workflow, current_data, target_variable)
  
  # Store metrics
  f_meas_scores_df4 <- c(f_meas_scores_df4, scores$mean[scores$.metric == 'f_meas'])
  
  # Identify and remove the least important feature
  least_imp_index <- which.min(shap_absmean)
  feature_to_remove <- feature_names[least_imp_index]
  
  X_rfe <- X_rfe %>% select(-all_of(feature_to_remove))
  features_eliminated_df4 <- c(features_eliminated_df4, feature_to_remove)
  feature_names <- feature_names[-least_imp_index]
  shap_absmean <- shap_absmean[-least_imp_index]
}


# Create a data frame to store results
RFE_results_df4 <- data.frame(
  num_features = seq(length(features_eliminated_df4)),
  f_meas = f_meas_scores_df4
)

# Plot the RFE results
RFE_performance_df4 <-  ggplot(RFE_results_df4, aes(x = num_features)) +
  geom_line(aes(y = f_meas)) +
  labs(y = "f_meas Score", x = "Number of Features Eliminated",
       title = "RFE Performance Metrics - DF 4") +
  scale_x_continuous(breaks = seq(min(RFE_results_df4$num_features), 
                                  max(RFE_results_df4$num_features), by = 2)) +
  #scale_y_continuous(limits = c(0.1, 0.9)) +
  theme_minimal()
setwd("H:/oral_contraception_over_time/results")
ggsave("RFE_performance_df4.png", RFE_performance_df4, width = 10, height = 7)
```

#### Finalize Top Variables

```{r}
# Collecting the 6 Top KernelSHAP Variables
top6VI_df1 <- names(sort(colMeans(abs(as.data.frame(treeshap_rf_df1$shaps))),
                               decreasing = TRUE))[1:6] 
top6VI_df2 <- names(sort(colMeans(abs(as.data.frame(treeshap_rf_df2$shaps))),
                               decreasing = TRUE))[1:6] 
top6VI_df3 <- names(sort(colMeans(abs(as.data.frame(treeshap_rf_df3$shaps))),
                               decreasing = TRUE))[1:6] 
top6VI_df4 <- names(sort(colMeans(abs(as.data.frame(treeshap_rf_df4$shaps))),
                               decreasing = TRUE))[1:6]

```

```{r}
# Collecting the 6 Top TreeSHAP Variables
top6VI_df1 <- treeshap_rf_df1$shaps %>% as.data.frame() %>% 
  summarise(across(everything(), ~ mean(abs(.), na.rm = TRUE))) %>%
  pivot_longer(cols = everything(), names_to = "feature", values_to = "mean_abs_shap_value") %>%
  arrange(desc(mean_abs_shap_value)) %>%
  slice(1:6) %>% pull(feature)

top6VI_df2 <- treeshap_rf_df2$shaps %>% as.data.frame() %>% 
  summarise(across(everything(), ~ mean(abs(.), na.rm = TRUE))) %>%
  pivot_longer(cols = everything(), names_to = "feature", values_to = "mean_abs_shap_value") %>%
  arrange(desc(mean_abs_shap_value)) %>%
  slice(1:6) %>% pull(feature)

top6VI_df3 <- treeshap_rf_df3$shaps %>% as.data.frame() %>% 
  summarise(across(everything(), ~ mean(abs(.), na.rm = TRUE))) %>%
  pivot_longer(cols = everything(), names_to = "feature", values_to = "mean_abs_shap_value") %>%
  arrange(desc(mean_abs_shap_value)) %>%
  slice(1:6) %>% pull(feature)

top6VI_df4 <- treeshap_rf_df4$shaps %>% as.data.frame() %>% 
  summarise(across(everything(), ~ mean(abs(.), na.rm = TRUE))) %>%
  pivot_longer(cols = everything(), names_to = "feature", values_to = "mean_abs_shap_value") %>%
  arrange(desc(mean_abs_shap_value)) %>%
  slice(1:6) %>% pull(feature)
```

### SHAP Bar Plots

```{r}
# SHAP Bar plots (for Top X variables)
#setwd("H:/oral_contraception_over_time/results")
setwd("C:/Users/Bryan Chan/Documents/Projects/oral_contraception_over_time/results")

  shap_barTX_rf_df1 <- treeshap_rf_df1 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 11, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 1: 1991-93 (age 27)") +
    scale_y_discrete(labels = labels) +
    coord_cartesian(xlim = c(0, 0.07))
  ggsave("shap_barTX_rf_df1.png", shap_barTX_rf_df1)
  
  shap_barTX_rf_df2 <- treeshap_rf_df2 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 10, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 2: 1981-83 (age 27)") +
    scale_y_discrete(labels = labels) +
    coord_cartesian(xlim = c(0, 0.07))
  ggsave("shap_barTX_rf_df2.png", shap_barTX_rf_df2)
  
  shap_barTX_rf_df3 <- treeshap_rf_df3 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 10, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 2: 1981-83 (age 37)") +
    scale_y_discrete(labels = labels) +
    coord_cartesian(xlim = c(0, 0.07))
  ggsave("shap_barTX_rf_df3.png", shap_barTX_rf_df3)

  shap_barTX_rf_df4 <- treeshap_rf_df4 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 10, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 3: 1971-73 (age 37)") +
    scale_y_discrete(labels = labels) +
    coord_cartesian(xlim = c(0, 0.07))
  ggsave("shap_barTX_rf_df4.png", shap_barTX_rf_df4)
  
  shap_barTX_rf_df1
  shap_barTX_rf_df2
  shap_barTX_rf_df3
  shap_barTX_rf_df4
```

```{r}
# SHAP Bar plots (for all variables) 

setwd("H:/oral_contraception_over_time/results")
  shap_bar_rf_df1 <- treeshap_rf_df1 %>% 
    shapviz() %>% 
    sv_importance(max_display = Inf, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 1 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_bar_rf_df1.png", shap_bar_rf_df1, width = 7, height = 14)
  
  shap_bar_rf_df2 <- treeshap_rf_df2 %>% 
    shapviz() %>% 
    sv_importance(max_display = Inf, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 2 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_bar_rf_df2.png", shap_bar_rf_df2, width = 7, height = 14)
  
  shap_bar_rf_df3 <- treeshap_rf_df3 %>% 
    shapviz() %>% 
    sv_importance(max_display = Inf, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 2 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_bar_rf_df3.png", shap_bar_rf_df3, width = 7, height = 14)

  shap_bar_rf_df4 <- treeshap_rf_df4 %>% 
    shapviz() %>% 
    sv_importance(max_display = Inf, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 3 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_bar_rf_df4.png", shap_bar_rf_df4, width = 7, height = 14)
  
```

### SHAP Beeswarm Plots

```{r}
# For Top X Variables
setwd("H:/oral_contraception_over_time/results")

  shap_beeswarmTX_rf_df1 <- treeshap_rf_df1 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 11) +
    ggtitle("Birth cohort 1: 1991-93 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmTX_rf_df1.png", shap_beeswarmTX_rf_df1)
  
  shap_beeswarmTX_rf_df2 <- treeshap_rf_df2 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 10) +
    ggtitle("Birth cohort 2: 1981-83 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmTX_rf_df2.png", shap_beeswarmTX_rf_df2)

  shap_beeswarmTX_rf_df3 <- treeshap_rf_df3 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 10) +
    ggtitle("Birth cohort 2: 1981-83 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmTX_rf_df3.png", shap_beeswarmTX_rf_df3)
  
  shap_beeswarmTX_rf_df4 <- treeshap_rf_df4 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 10) +
    ggtitle("Birth cohort 3: 1971-73 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmTX_rf_df4.png", shap_beeswarmTX_rf_df4)
  
shap_beeswarmTX_rf_df1
shap_beeswarmTX_rf_df2
shap_beeswarmTX_rf_df3
shap_beeswarmTX_rf_df4
```

### SHAP Waterfall Plots

```{r}
setwd("H:/oral_contraception_over_time/results")

  shap_waterfall_df1 <- kernelshap_df1 %>% 
    shapviz(which_class = 2) %>% 
    sv_waterfall(max_display = Inf) +
    ggtitle("Birth cohort 1 (age 27)")
  ggsave("shap_waterfall_df1.png", shap_waterfall_df1, width = 15, height = 15)
  
  shap_waterfall_df2 <- kernelshap_df2 %>% 
    shapviz(which_class = 2) %>% 
    sv_waterfall(max_display = Inf) +
    ggtitle("Birth cohort 2 (age 27)")
  ggsave("shap_waterfall_df2.png", shap_waterfall_df2, width = 15, height = 15)
  
  shap_waterfall_df3 <- kernelshap_df3 %>% 
    shapviz(which_class = 2) %>% 
    sv_waterfall(max_display = Inf) +
    ggtitle("Birth cohort 2 (age 37)")
  ggsave("shap_waterfall_df3.png", shap_waterfall_df3, width = 15, height = 15)
  
  shap_waterfall_df4 <- kernelshap_df4 %>% 
    shapviz(which_class = 2) %>% 
    sv_waterfall(max_display = Inf) +
    ggtitle("Birth cohort 3 (age 37)")
  ggsave("shap_waterfall_df4.png", shap_waterfall_df4, width = 15, height = 15)
  
```

### SHAP Force Plots

```{r}
setwd("H:/oral_contraception_over_time/results")

  shap_force_df1 <- kernelshap_df1 %>% 
    shapviz(which_class = 2) %>% 
    sv_force(max_display = Inf) +
    ggtitle("Birth cohort 1 (age 27)")+
    scale_y_discrete(labels = labels) 
  ggsave("shap_force_df1.png", shap_force_df1)
  
  shap_force_df2 <- kernelshap_df2 %>% 
    shapviz(which_class = 2) %>% 
    sv_force(max_display = Inf) +
    ggtitle("Birth cohort 2 (age 27)")+
    scale_y_discrete(labels = labels) 
  ggsave("shap_force_df2.png", shap_force_df2)
  
  shap_force_df3 <- kernelshap_df3 %>% 
    shapviz(which_class = 2) %>% 
    sv_force(max_display = Inf) +
    ggtitle("Birth cohort 2 (age 37)")+
    scale_y_discrete(labels = labels) 
  ggsave("shap_force_df3.png", shap_force_df3)
  
  shap_force_df4 <- kernelshap_df4 %>% 
    shapviz(which_class = 2) %>% 
    sv_force(max_display = Inf) +
    ggtitle("Birth cohort 3 (age 37)")+
    scale_y_discrete(labels = labels) 
  ggsave("shap_force_df4.png", shap_force_df4)
```

### SHAP Co-Dependence Plots

```{r}
# Function to plot SHAP codependence plot
plot_shap_dependence <- function(shap_obj, df, var1, var2) {
  
  plot <- shap_obj %>%
    shapviz() %>%
    sv_dependence(v = var1, color_var = var2, interactions = TRUE, jitter_width = 0.1) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
    labs(title = paste("SHAP Dependence Plot for", "\n",
                       labels[var1], "and", 
                       labels[var2], sep = " "),
         x = labels[var1], 
         color = labels[var2],
         y = "SHAP interaction value")
  
  print(plot)
  
  file_name <- paste0("shap_depd", df , var1, "_", var2, ".png")
  ggsave(file_name, plot)
 
}

# Example without labels
treeshap_rf_df1 %>%
    shapviz() %>%
    sv_dependence(v = "nkids", color_var = "val1i4", interactions = TRUE, jitter_width = 0.1)
```

```{r}
# Plot
setwd("H:/oral_contraception_over_time/results/codependence_plots")
setwd("C:/Users/Bryan Chan/Documents/Projects/oral_contraception_over_time/results")
  # DF 1
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "val1i4")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "openness")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "neuroticism")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "empl_Full.time.or.self.employment")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "extraversion")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "val1i5")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "pinc_decile")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "conscientiousness")
setwd("C:/Users/Bryan Chan/Documents/Projects/oral_contraception_over_time/results")
plot_shap_dependence(treeshap_rf_df1, df = "_df1_", "nkids", "agreeableness")

  # DF 2
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "nkids", "relstat_Married")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "nkids", "health")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "nkids", "pinc_decile")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "nkids", "extraversion")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "nkids", "val1i5")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "relstat_Married", "health")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "relstat_Married", "pinc_decile")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "relstat_Married", "extraversion")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "relstat_Married", "val1i5")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "health", "pinc_decile")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "health", "pinc_decile")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "health", "extraversion")
plot_shap_dependence(treeshap_rf_df2, df = "_df2_", "health", "val1i5")

  # DF 3
#plot_shap_dependence(treeshap_rf_df3, df = "_df3_", "nkids", "xxxxx")
#plot_shap_dependence(treeshap_rf_df3, df = "_df3_", "nkids", "xxxxx")

  # DF 4
plot_shap_dependence(treeshap_rf_df4, df = "_df4_", "bmi_category", "rel")
plot_shap_dependence(treeshap_rf_df4, df = "_df4_", "bmi_category", "neuroticism")
plot_shap_dependence(treeshap_rf_df4, df = "_df4_", "bmi_category", "region_Eastern.Germany")
plot_shap_dependence(treeshap_rf_df4, df = "_df4_", "bmi_category", "nkids")
plot_shap_dependence(treeshap_rf_df4, df = "_df4_", "bmi_category", "sex_often_X1")
```

### SHAP Interaction Plots

```{r}
setwd("H:/oral_contraception_over_time/results")

  shap_interaction_plot_rf_df1 <- treeshap_rf_df1 %>% 
    shapviz() %>% 
    sv_interaction(kind = "beeswarm", 
                   max_display = 10, 
                   #size = 3, alpha = 0.3, bee_width = 0.3, bee_adjust = 0.5,
                   color_bar_title = "Row feature value")
  ggsave("shap_interaction_plot_rf_df1.png", shap_interaction_plot_rf_df1, width = 17, height = 17)
  
  shap_interaction_plot_rf_df2 <- treeshap_df2 %>% 
    shapviz() %>% 
    sv_interaction(kind = "beeswarm", 
                   max_display = 10, 
                   #size = 3, alpha = 0.3, bee_width = 0.3, bee_adjust = 0.5,
                   color_bar_title = "Row feature value")
  ggsave("shap_interaction_plot_rf_df2.png", shap_interaction_plot_rf_df2, width = 17, height = 17)
  
  shap_interaction_plot_rf_df3 <- treeshap_df3 %>% 
    shapviz() %>% 
    sv_interaction(kind = "beeswarm", 
                   max_display = 10, 
                   #size = 3, alpha = 0.3, bee_width = 0.3, bee_adjust = 0.5,
                   color_bar_title = "Row feature value")
  ggsave("shap_interaction_plot_rf_df3.png", shap_interaction_plot_rf_df3, width = 17, height = 17)
  
  shap_interaction_plot_rf_df4 <- treeshap_df4 %>% 
    shapviz() %>% 
    sv_interaction(kind = "beeswarm", 
                   max_display = 10, 
                   #size = 3, alpha = 0.3, bee_width = 0.3, bee_adjust = 0.5,
                   color_bar_title = "Row feature value")
  ggsave("shap_interaction_plot_rf_df4.png", shap_interaction_plot_rf_df4, width = 17, height = 17)

```

### SHAP Interaction Values

```{r}

prefix <- "df1"

# Create the interaction values data frame
interaction_values <- potential_interactions(obj = shapviz(treeshap_rf_df1, 
                                                           which_class = 2), 
                                             v = "nkids") %>%
  as.data.frame() %>% 
  rownames_to_column(var = "variable") %>%
  rename(shap_interaction_value = ".")

# Create the bar plot
ggplot(interaction_values, aes(x = reorder(variable, shap_interaction_value), y = shap_interaction_value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() + # To make the bars horizontal
  xlab("Variable") +
  ylab("SHAP Interaction Value") +
  ggtitle(paste("SHAP Interaction Values for", prefix, "'", labels["nkids"], "'"))
```

```{r}
setwd("H:/oral_contraception_over_time/results/interaction_value_plots")


# Loop through each variable in top6VI_df1
  prefix <- "df1"
  for (variable in top6VI_df1) {
    interaction_values <- potential_interactions(obj = shapviz(kernelshap_df1,
                                                 which_class = 2),
                                               v = variable) %>%
                          as.data.frame() %>%
                          rownames_to_column(var = "variable") %>%
                          rename(shap_interaction_value = ".")
  
    
    plot <- ggplot(interaction_values, 
                   aes(x = reorder(variable, shap_interaction_value), 
                                           y = shap_interaction_value)) + # Create the bar plot
      geom_bar(stat = "identity", fill = "steelblue") +
      coord_flip() + # To make the bars horizontal
      xlab("Variable") +
      ylab("SHAP Interaction Value") +
      scale_x_discrete(labels = labels) +
      ggtitle(paste("SHAP Interaction Values for", prefix, "'", labels[variable], "'"))
  
    ggsave(paste("shap_interaction_plot_", prefix, "_", variable, ".png", sep = ""), # Save the plot
           plot)  }

# Loop through each variable in top6VI_df2
  prefix <- "df2"
  for (variable in top6VI_df2) {
    interaction_values <- potential_interactions(obj = shapviz(kernelshap_df2,
                                                 which_class = 2),
                                               v = variable) %>%
                          as.data.frame() %>%
                          rownames_to_column(var = "variable") %>%
                          rename(shap_interaction_value = ".")
  
    
    plot <- ggplot(interaction_values, 
                   aes(x = reorder(variable, shap_interaction_value), 
                                           y = shap_interaction_value)) + # Create the bar plot
      geom_bar(stat = "identity", fill = "steelblue") +
      coord_flip() + # To make the bars horizontal
      xlab("Variable") +
      ylab("SHAP Interaction Value") +
      scale_x_discrete(labels = labels) +
      ggtitle(paste("SHAP Interaction Values for", prefix, "'", labels[variable], "'"))
  
    ggsave(paste("shap_interaction_plot_", prefix, "_", variable, ".png", sep = ""), # Save the plot
           plot)  }

# Loop through each variable in top6VI_df3
  prefix <- "df3"
  for (variable in top6VI_df3) {
    interaction_values <- potential_interactions(obj = shapviz(kernelshap_df3,
                                                 which_class = 2),
                                               v = variable) %>%
                          as.data.frame() %>%
                          rownames_to_column(var = "variable") %>%
                          rename(shap_interaction_value = ".")
  
    
    plot <- ggplot(interaction_values, 
                   aes(x = reorder(variable, shap_interaction_value), 
                                           y = shap_interaction_value)) + # Create the bar plot
      geom_bar(stat = "identity", fill = "steelblue") +
      coord_flip() + # To make the bars horizontal
      xlab("Variable") +
      ylab("SHAP Interaction Value") +
      scale_x_discrete(labels = labels) +
      ggtitle(paste("SHAP Interaction Values for", prefix, "'", labels[variable], "'"))
  
    ggsave(paste("shap_interaction_plot_", prefix, "_", variable, ".png", sep = ""), # Save the plot
           plot)  }
  
# Loop through each variable in top6VI_df4
  prefix <- "df4"
  for (variable in top6VI_df4) {
    interaction_values <- potential_interactions(obj = shapviz(kernelshap_df4,
                                                 which_class = 2),
                                               v = variable) %>%
                          as.data.frame() %>%
                          rownames_to_column(var = "variable") %>%
                          rename(shap_interaction_value = ".")
  
    
    plot <- ggplot(interaction_values, 
                   aes(x = reorder(variable, shap_interaction_value), 
                                           y = shap_interaction_value)) + # Create the bar plot
      geom_bar(stat = "identity", fill = "steelblue") +
      coord_flip() + # To make the bars horizontal
      xlab("Variable") +
      ylab("SHAP Interaction Value") +
      scale_x_discrete(labels = labels) +
      ggtitle(paste("SHAP Interaction Values for", prefix, "'", labels[variable], "'"))
  
    ggsave(paste("shap_interaction_plot_", prefix, "_", variable, ".png", sep = ""), # Save the plot
           plot)  }
```

## EXECUTE Testing

```{r}
# Evaluate model on Test Dataset - Get Metrics
df_test_list <- list(df1 = df1_test, df2 = df2_test, 
                     df3 = df3_test, df4 = df4_test) # Create a list of data frames

fit_rf_list<- list(fit_rf_train_df1, fit_rf_train_df2, 
                    fit_rf_train_df3, fit_rf_train_df4) # Create a list of models

purrr::map2_df(df_test_list,
               fit_rf_list,
               calc_metrics, .id = "DF") 

```

## ROC Curve

```{r}
setwd("H:/oral_contraception_over_time/results")

roc_curve_rf_df1 <- augment(fit_rf_train_df1, new_data = df1_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 1 (age 27)") +
  labs(subtitle = "DF1")
ggsave("roc_curve_rf_recipe5_df1.png", roc_curve_rf_df1)


roc_curve_rf_df2 <- augment(fit_rf_train_df2, new_data = df2_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 2 (age 27)") +
  labs(subtitle = "DF2")
ggsave("roc_curve_rf_recipe5_df2.png", roc_curve_rf_df2)

roc_curve_rf_df3 <- augment(fit_rf_train_df3, new_data = df3_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 2 (age 37)") +
  labs(subtitle = "DF3")
ggsave("roc_curve_rf_recipe5_df3.png", roc_curve_rf_df3)

roc_curve_rf_df4 <- augment(fit_rf_train_df4, new_data = df4_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 3 (age 37)") +
  labs(subtitle = "DF4")
ggsave("roc_curve_rf_recipe5_df4.png", roc_curve_rf_df4)

```

# (2) Build: XGBoost

## i. Recipe - XGB

Because XGBoost manages only numeric vectors

```{r}
# Define a function to create the recipe
create_xgb_recipe1 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>%                 # remove variables that contain only single value
    step_dummy(c('urban', 'sex_often', 'abortion', 'migback', 
                 'relstat', 'empl', 'ethni', 'region', 'addchild', 
                 'denomination', 'nkids', 'bmi_category', 
                 'rel', 'edu', 'health'))         # apply one-hot encoding (All variables)
}

create_xgb_recipe2 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health'))         # apply ordinal encoding (Ordinal variables)            
}

create_xgb_recipe3 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health')) %>%     # apply ordinal encoding (Ordinal variables)            
    step_upsample(hormon_iudor, over_ratio = 1) # creates synthetic data (UPSAMPLE) for Minority class
}

create_xgb_recipe4 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health')) %>%     # apply ordinal encoding (Ordinal variables)            
    step_rose(hormon_iudor, over_ratio = 1)     # creates synthetic data (ROSE) for Minority class
}

create_xgb_recipe5 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 
                 'migback', 'relstat', 'empl', 
                 'ethni', 'region', 'addchild', 
                 'denomination')) %>%             # apply one-hot encoding (Nominal variables)
    step_mutate(nkids = as.numeric(as.character(nkids))) %>% 
    step_ordinalscore(c('bmi_category', 'rel', 
                        'edu', 'health')) %>%     # apply ordinal encoding (Ordinal variables)            
    step_smotenc(hormon_iudor, over_ratio = 1)    # creates synthetic data (SMOTE) for Minority class
}

create_xgb_recipe6 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 'migback', 
                 'relstat', 'empl', 'ethni', 'region', 'addchild', 
                 'denomination', 'nkids', 'bmi_category', 
                 'rel', 'edu', 'health')) %>%     # apply one-hot encoding (All Categorical variables)
    step_upsample(hormon_iudor, over_ratio = 1)   # creates synthetic data (UPSAMPLE) for Minority class
}

create_xgb_recipe7 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 'migback', 
                 'relstat', 'empl', 'ethni', 'region', 'addchild', 
                 'denomination', 'nkids', 'bmi_category', 
                 'rel', 'edu', 'health')) %>%     # apply one-hot encoding (All Categorical variables)
    step_rose(hormon_iudor, over_ratio = 1)       # creates synthetic data (ROSE) for Minority class
}

create_xgb_recipe8 <- function(data) {
  recipe(formula = hormon_iudor ~ ., data = data) %>%
    step_zv(all_predictors()) %>% 
    step_dummy(c('urban', 'sex_often', 'abortion', 'migback', 
                 'relstat', 'empl', 'ethni', 'region', 'addchild', 
                 'denomination', 'nkids', 'bmi_category', 
                 'rel', 'edu', 'health')) %>%     # apply one-hot encoding (All Categorical variables)
    step_smotenc(hormon_iudor, over_ratio = 1)      # creates synthetic data (SMOTE) for Minority class
}
```

```{r}
# Extracting the preprocessed training set from the prepared recipe
df1_xgb_train_prep <- create_xgb_recipe1(df1_train) %>% prep() %>% juice() %>% 
  mutate(hormon_iudor = as.numeric(as.character(hormon_iudor)))
df2_xgb_train_prep <- create_xgb_recipe1(df2_train) %>% prep() %>% juice()%>% 
  mutate(hormon_iudor = as.numeric(as.character(hormon_iudor)))
df3_xgb_train_prep <- create_xgb_recipe1(df3_train) %>% prep() %>% juice()%>% 
  mutate(hormon_iudor = as.numeric(as.character(hormon_iudor)))
df4_xgb_train_prep <- create_xgb_recipe1(df4_train) %>% prep() %>% juice()%>% 
  mutate(hormon_iudor = as.numeric(as.character(hormon_iudor)))
```

## ii. Model Specification

```{r}
xgb_specification <- boost_tree(trees = 1000,     
                                tree_depth = tune(),  # first three: For model complexity
                                loss_reduction = tune(),
                                min_n = tune(),
                                mtry = tune(), 
                                learn_rate = tune()  # Learning rate
                                ) %>% 
  set_mode("classification") %>% 
  set_engine("xgboost")
```

## iii. Workflow definition

```{r}
xgb_workflow1 <- workflow() %>%
  add_recipe(create_xgb_recipe2(df1_train)) %>%
  add_model(xgb_specification)

xgb_workflow2 <- workflow() %>%
  add_recipe(create_xgb_recipe2(df2_train)) %>%
  add_model(xgb_specification)

xgb_workflow3 <- workflow() %>%
  add_recipe(create_xgb_recipe2(df3_train)) %>%
  add_model(xgb_specification)

xgb_workflow4 <- workflow() %>%
  add_recipe(create_xgb_recipe2(df4_train)) %>%
  add_model(xgb_specification)
```

## RUN Hyperparameter Tuning

```{r}
# Create Hyperparameter Space Filling Design (Grid)

xgb_grid_df1 <- grid_latin_hypercube(
  tree_depth(), min_n(), loss_reduction(), 
  finalize(mtry(), df1_train),
  learn_rate(),
  size = 30
)

xgb_grid_df2 <- grid_latin_hypercube(
  tree_depth(), min_n(), loss_reduction(), 
  finalize(mtry(), df2_train),
  learn_rate(),
  size = 30
)

xgb_grid_df3 <- grid_latin_hypercube(
  tree_depth(), min_n(), loss_reduction(), 
  finalize(mtry(), df3_train),
  learn_rate(),
  size = 30
)

xgb_grid_df4 <- grid_latin_hypercube(
  tree_depth(), min_n(), loss_reduction(), 
  finalize(mtry(), df4_train),
  learn_rate(),
  size = 30
)
```

```{r}
# Dataframe 1
doParallel::registerDoParallel()
set.seed(2024)
xgb_tune_result_df1 <- tune_grid(xgb_workflow1,
                               resamples = df1_folds,
                               metrics = metric_set(roc_auc, accuracy),
                               grid = xgb_grid_df1, 
                               control = control_grid(save_pred = TRUE) )
show_notes(.Last.tune.result)
saveRDS(xgb_tune_result_df1, "rds_objects/xgb_recipe2_tune_result_df1.rds")

# Dataframe 2

set.seed(2024)
xgb_tune_result_df2 <- tune_grid(xgb_workflow2,
                               resamples = df2_folds,
                               metrics = metric_set(roc_auc, accuracy),
                               grid = xgb_grid_df2, 
                               control = control_grid(save_pred = TRUE) )
show_notes(.Last.tune.result)
saveRDS(xgb_tune_result_df2, "rds_objects/xgb_recipe2_tune_result_df2.rds")

# Dataframe 3

set.seed(2024)
xgb_tune_result_df3 <- tune_grid(xgb_workflow3,
                               resamples = df3_folds,
                               metrics = metric_set(roc_auc, accuracy),
                               grid = xgb_grid_df3, 
                               control = control_grid(save_pred = TRUE) )
show_notes(.Last.tune.result)
saveRDS(xgb_tune_result_df3, "rds_objects/xgb_recipe2_tune_result_df3.rds")

# Dataframe 4

set.seed(2024)
xgb_tune_result_df4 <- tune_grid(xgb_workflow4,
                               resamples = df4_folds,
                               metrics = metric_set(roc_auc, accuracy),
                               grid = xgb_grid_df4, 
                               control = control_grid(save_pred = TRUE) )
show_notes(.Last.tune.result)
saveRDS(xgb_tune_result_df4, "rds_objects/xgb_recipe2_tune_result_df4.rds")
```

```{r}
xgb_tune_result_df1 <- readRDS("rds_objects/xgb_recipe2_tune_result_df1.rds")
xgb_tune_result_df2 <- readRDS("rds_objects/xgb_recipe2_tune_result_df2.rds")
xgb_tune_result_df3 <- readRDS("rds_objects/xgb_recipe2_tune_result_df3.rds")
xgb_tune_result_df4 <- readRDS("rds_objects/xgb_recipe2_tune_result_df4.rds")
```

### Evaluate Training

```{r}
# Show accuracy for different hyperparameters
xgb_tune_result_df1 %>%
  collect_metrics()

xgb_tune_result_df2 %>%
  collect_metrics()

xgb_tune_result_df3 %>%
  collect_metrics()

xgb_tune_result_df4 %>%
  collect_metrics()
```

```{r}
# Visualize accuracy for different hyperparameters
xgb_tune_result_df1 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% # keep ROC_AUC only, used for binary classification problems
  select(mean, mtry:loss_reduction) %>%
  pivot_longer(mtry:loss_reduction,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 1") +  
  labs(x = NULL, y = "AUC")

xgb_tune_result_df2 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, mtry:loss_reduction) %>%
  pivot_longer(mtry:loss_reduction,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 2") +  
  labs(x = NULL, y = "AUC")

xgb_tune_result_df3 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, mtry:loss_reduction) %>%
  pivot_longer(mtry:loss_reduction,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 3") +  
  labs(x = NULL, y = "AUC")

xgb_tune_result_df4 %>%
  collect_metrics() %>%
  filter(.metric == "roc_auc") %>% 
  select(mean, mtry:loss_reduction) %>%
  pivot_longer(mtry:loss_reduction,
    values_to = "value",
    names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  ggtitle("Tune D.F. 4") +  
  labs(x = NULL, y = "AUC")
```

### Select Best Hyperparameters

```{r}
best_auc_xgb_df1 <- select_best(xgb_tune_result_df1, "roc_auc")
best_auc_xgb_df2 <- select_best(xgb_tune_result_df2, "roc_auc")
best_auc_xgb_df3 <- select_best(xgb_tune_result_df3, "roc_auc")
best_auc_xgb_df4 <- select_best(xgb_tune_result_df4, "roc_auc")

best_auc_xgb_df1
best_auc_xgb_df2
best_auc_xgb_df3
best_auc_xgb_df4
```

## RUN Training

REMEMBER: Change to the desired 'RECIPE' !!!!!!!!!!!!!!!!!

```{r}
### REMEMBER: Change to the desired 'RECIPE' !!!!!!!!!!!!!!!!!
set.seed(2024)

# Data Frame 1
xgb_workflow_final_df1 <- workflow() %>% # Define final workflow
  add_recipe(create_xgb_recipe2(df1_train)) %>%   #  use standard recipe
  add_model(finalize_model(xgb_specification,
                           best_auc_xgb_df1)) # use final model

fit_xgb_train_df1 <- fit(xgb_workflow_final_df1, data = df1_train) # Fit onto Training Data
saveRDS(fit_xgb_train_df1, file = "rds_objects/fit_recipe2_xgb_train_df1.rds")

# Data Frame 2
xgb_workflow_final_df2 <- workflow() %>% # Define final workflow
  add_recipe(create_xgb_recipe2(df2_train)) %>%   #  use standard recipe
  add_model(finalize_model(xgb_specification,
                           best_auc_xgb_df2)) # use final model

fit_xgb_train_df2 <- fit(xgb_workflow_final_df2, data = df2_train) # Fit onto Training Data
saveRDS(fit_xgb_train_df2, file = "rds_objects/fit_recipe2_xgb_train_df2.rds")

# Data Frame 3
xgb_workflow_final_df3 <- workflow() %>% # Define final workflow
  add_recipe(create_xgb_recipe2(df3_train)) %>%   #  use standard recipe
  add_model(finalize_model(xgb_specification,
                           best_auc_xgb_df3)) # use final model

fit_xgb_train_df3 <- fit(xgb_workflow_final_df3, data = df3_train) # Fit onto Training Data
saveRDS(fit_xgb_train_df3, file = "rds_objects/fit_recipe2_xgb_train_df3.rds")

# Data Frame 4
xgb_workflow_final_df4 <- workflow() %>% # Define final workflow
  add_recipe(create_xgb_recipe2(df4_train)) %>%   #  use standard recipe
  add_model(finalize_model(xgb_specification,
                           best_auc_xgb_df4)) # use final model

fit_xgb_train_df4 <- fit(xgb_workflow_final_df4, data = df4_train) # Fit onto Training Data
saveRDS(fit_xgb_train_df4, file = "rds_objects/fit_recipe2_xgb_train_df4.rds")
```

### Load Fitted Model

```{r}
setwd("H:/oral_contraception_over_time/code/r/")

fit_xgb_train_df1 <- readRDS("rds_objects/fit_recipe2w_xgb_train_df1.rds")
fit_xgb_train_df2 <- readRDS("rds_objects/fit_recipe2w_xgb_train_df2.rds")
fit_xgb_train_df3 <- readRDS("rds_objects/fit_recipe2w_xgb_train_df3.rds")
fit_xgb_train_df4 <- readRDS("rds_objects/fit_recipe2w_xgb_train_df4.rds")
```

```{r}

plot_probabilities_distribution("recipe2_Weighted", "XGboost", "xgb_",
                                fit_xgb_train_df1, fit_xgb_train_df2,
                                fit_xgb_train_df3, fit_xgb_train_df4,
                                df1_train, df2_train, df3_train, df4_train)

plot_Confusion_Matrix("recipe2_Weighted", "XGboost", "xgb_",
                      fit_xgb_train_df1, fit_xgb_train_df2, 
                      fit_xgb_train_df3, fit_xgb_train_df4,
                      df1_train, df2_train, df3_train, df4_train)

```

### Metrics

Evaluate the Training data

```{r}
# Confusion Matrix for each Fit
augment(fit_xgb_train_df1, new_data = df1_train) %>%
  conf_mat(truth = hormon_iudor, estimate = .pred_class)
augment(fit_xgb_train_df2, new_data = df2_train) %>%
  conf_mat(truth = hormon_iudor, estimate = .pred_class)
augment(fit_xgb_train_df3, new_data = df3_train) %>%
  conf_mat(truth = hormon_iudor, estimate = .pred_class)
augment(fit_xgb_train_df4, new_data = df4_train) %>%
  conf_mat(truth = hormon_iudor, estimate = .pred_class)
```

```{r}
# Distribution of Predicted Probabilities for each Fit
augment(fit_xgb_train_df1, new_data = df1_train) %>% 
  ggplot(aes(.pred_1, fill = hormon_iudor)) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribution of Predicted Probabilities of '1'", 
       subtitle = "Group by True 'Hormon_Iudor'",
       x = "Predicted Probability", y = "Count") +
  scale_x_continuous(limits = c(0, 1)) +
  geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal()

augment(fit_xgb_train_df2, new_data = df2_train) %>% 
  ggplot(aes(.pred_1, fill = hormon_iudor)) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribution of Predicted Probabilities of '1'", 
       subtitle = "Group by True 'Hormon_Iudor'",
       x = "Predicted Probability", y = "Count") +
  scale_x_continuous(limits = c(0, 1)) +
  geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal()

augment(fit_xgb_train_df3, new_data = df3_train) %>%
  ggplot(aes(.pred_1, fill = hormon_iudor)) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribution of Predicted Probabilities of '1'", 
       subtitle = "Group by True 'Hormon_Iudor'",
       x = "Predicted Probability", y = "Count") +
  scale_x_continuous(limits = c(0, 1)) +
  geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal()

augment(fit_xgb_train_df4, new_data = df4_train) %>%
  ggplot(aes(.pred_1, fill = hormon_iudor)) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribution of Predicted Probabilities of '1'", 
       subtitle = "Group by True 'Hormon_Iudor'",
       x = "Predicted Probability", y = "Count") +
  scale_x_continuous(limits = c(0, 1)) +
  geom_vline(xintercept = 0.5, linetype = "dotted") + theme_minimal()
```

```{r}
# MN: add metric set
metrics_combined <- yardstick::metric_set(yardstick::accuracy,
                                          yardstick::precision,
                                          yardstick::recall,
                                          yardstick::f_meas)

# Function to calculate metrics
calc_metrics <- function(df, fit) {
  augment(fit, new_data = df) %>%
    metrics_combined(truth = hormon_iudor, estimate = .pred_class, event_level = "second") %>%
    bind_rows(augment(fit, new_data = df) %>% 
                yardstick::roc_auc(truth = hormon_iudor, .pred_1,
                                   event_level = "second"))
}
```

```{r}
# Get the metrics of Trained Model - XGB
df_train_list <- list(df1 = df1_train, df2 = df2_train, 
                      df3 = df3_train, df4 = df4_train) # Create a list of data frames


fit_xgb_list<- list(fit_xgb_train_df1, fit_xgb_train_df2, 
                    fit_xgb_train_df3, fit_xgb_train_df4) # Create a list of models

purrr::map2_df(df_train_list,
               fit_xgb_list,
               calc_metrics, .id = "DF") 
```

## SHAP

Type 2: Calculate SHAP values with Treeshap()

```{r}
# df1
unified_xgb_model_df1 <- xgboost::xgboost(
  data = df1_xgb_train_prep %>% select(-hormon_iudor) %>% as.matrix, 
  label = df1_xgb_train_prep$hormon_iudor, 
  objective = "binary:logistic",
  colsample_bytree = best_auc_xgb_df1$mtry/(ncol(df1_xgb_train_prep)-1),
  min_child_weight = best_auc_xgb_df1$min_n,
  max_depth = best_auc_xgb_df1$tree_depth,
  eta = best_auc_xgb_df1$learn_rate,
  gamma = best_auc_xgb_df1$loss_reduction,
  nrounds = fit_xgb_train_df1$fit$fit$fit$niter,
  verbose = 0 ) %>% 
  xgboost.unify(df1_xgb_train_prep)

set.seed(2024)
treeshap_xgb_df1 <- treeshap(unified_xgb_model_df1,  # treeshap
                         x = df1_xgb_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_xgb_df1, file = "rds_objects/treeshap_xgb_recipe3_df1.rds")

# df2
unified_xgb_model_df2 <- xgboost::xgboost(
  data = df2_xgb_train_prep %>% select(-hormon_iudor) %>% as.matrix, 
  label = df2_xgb_train_prep$hormon_iudor, 
  objective = "binary:logistic",
  colsample_bytree = best_auc_xgb_df2$mtry/(ncol(df2_xgb_train_prep)-1),
  min_child_weight = best_auc_xgb_df2$min_n,
  max_depth = best_auc_xgb_df2$tree_depth,
  eta = best_auc_xgb_df2$learn_rate,
  gamma = best_auc_xgb_df2$loss_reduction,
  nrounds = fit_xgb_train_df2$fit$fit$fit$niter,
  verbose = 0 ) %>% 
  xgboost.unify(df2_xgb_train_prep)

set.seed(2024)
treeshap_xgb_df2 <- treeshap(unified_xgb_model_df2,  # treeshap
                         x = df2_xgb_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_xgb_df2, file = "rds_objects/treeshap_xgb_recipe3_df2.rds")

# df3
unified_xgb_model_df3 <- xgboost::xgboost(
  data = df3_xgb_train_prep %>% select(-hormon_iudor) %>% as.matrix, 
  label = df3_xgb_train_prep$hormon_iudor, 
  objective = "binary:logistic",
  colsample_bytree = best_auc_xgb_df3$mtry/(ncol(df3_xgb_train_prep)-1),
  min_child_weight = best_auc_xgb_df3$min_n,
  max_depth = best_auc_xgb_df3$tree_depth,
  eta = best_auc_xgb_df3$learn_rate,
  gamma = best_auc_xgb_df3$loss_reduction,
  nrounds = fit_xgb_train_df3$fit$fit$fit$niter,
  verbose = 0 ) %>% 
  xgboost.unify(df3_xgb_train_prep)

set.seed(2024)
treeshap_xgb_df3 <- treeshap(unified_xgb_model_df3,  # treeshap
                         x = df3_xgb_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_xgb_df3, file = "rds_objects/treeshap_xgb_recipe3_df3.rds")

# df4
unified_xgb_model_df4 <- xgboost::xgboost(
  data = df4_xgb_train_prep %>% select(-hormon_iudor) %>% as.matrix, 
  label = df4_xgb_train_prep$hormon_iudor, 
  objective = "binary:logistic",
  colsample_bytree = best_auc_xgb_df4$mtry/(ncol(df4_xgb_train_prep)-1),
  min_child_weight = best_auc_xgb_df4$min_n,
  max_depth = best_auc_xgb_df4$tree_depth,
  eta = best_auc_xgb_df4$learn_rate,
  gamma = best_auc_xgb_df4$loss_reduction,
  nrounds = fit_xgb_train_df4$fit$fit$fit$niter,
  verbose = 0 ) %>% 
  xgboost.unify(df4_xgb_train_prep)

set.seed(2024)
treeshap_xgb_df4 <- treeshap(unified_xgb_model_df4,  # treeshap
                         x = df4_xgb_train_prep,
                         interactions = TRUE, 
                         verbose = TRUE)
  saveRDS(treeshap_xgb_df4, file = "rds_objects/treeshap_xgb_recipe3_df4.rds")

```

```{r}
# Load up saved Treeshap
treeshap_xgb_df1 <- readRDS(file = "rds_objects/treeshap_xgb_df1.rds")
treeshap_xgb_df2 <- readRDS(file = "rds_objects/treeshap_xgb_df2.rds") 
treeshap_xgb_df3 <- readRDS(file = "rds_objects/treeshap_xgb_df3.rds")
treeshap_xgb_df4 <- readRDS(file = "rds_objects/treeshap_xgb_df4.rds")
```

### SHAP Bar Plots

```{r}
# SHAP Bar plots (for Top 6 variables)
setwd("H:/oral_contraception_over_time/results")

  shap_barT6_xgb_df1 <- treeshap_xgb_df1 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 6, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 1 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_barT6_xgb_df1.png", shap_barT6_xgb_df1)
  
  shap_barT6_xgb_df2 <- treeshap_xgb_df2 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 6, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 2 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_barT6_xgb_df2.png", shap_barT6_xgb_df2)
  
  shap_barT6_xgb_df3 <- treeshap_xgb_df3 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 6, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 2 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_barT6_xgb_df3.png", shap_barT6_xgb_df3)

  shap_barT6_xgb_df4 <- treeshap_xgb_df4 %>% 
    shapviz(which_class = 2) %>% 
    sv_importance(max_display = 6, kind = "bar", show_numbers = T)+
    ggtitle("Birth cohort 3 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_barT6_xgb_df4.png", shap_barT6_xgb_df4)
  
  shap_barT6_xgb_df1
  shap_barT6_xgb_df2
  shap_barT6_xgb_df3
  shap_barT6_xgb_df4
```

### SHAP Beeswarm Plots

```{r}
setwd("H:/oral_contraception_over_time/results")

  shap_beeswarmT6_xgb_df1 <- treeshap_xgb_df1 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 6) +
    ggtitle("Birth cohort 1 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmT6_xgb_df1.png", shap_beeswarmT6_xgb_df1)
  
  shap_beeswarmT6_xgb_df2 <- treeshap_xgb_df2 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 6) +
    ggtitle("Birth cohort 2 (age 27)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmT6_xgb_df2.png", shap_beeswarmT6_xgb_df2)
  
  shap_beeswarmT6_xgb_df3 <- treeshap_xgb_df3 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 6) +
    ggtitle("Birth cohort 2 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmT6_xgb_df3.png", shap_beeswarmT6_xgb_df3)
  
  shap_beeswarmT6_xgb_df4 <- treeshap_xgb_df4 %>% 
    shapviz() %>% 
    sv_importance(kind = "beeswarm", max_display = 6) +
    ggtitle("Birth cohort 3 (age 37)") +
    scale_y_discrete(labels = labels)
  ggsave("shap_beeswarmT6_xgb_df4.png", shap_beeswarmT6_xgb_df4)
```

## EXECUTE Testing

```{r}
# Evaluate model on Test Dataset
df_test_list <- list(df1 = df1_test, df2 = df2_test, 
                     df3 = df3_test, df4 = df4_test) # Create a list of data frames

fit_xgb_list<- list(fit_xgb_train_df1, fit_xgb_train_df2, 
                    fit_xgb_train_df3, fit_xgb_train_df4) # Create a list of models

purrr::map2_df(df_test_list,
               fit_xgb_list,
               calc_metrics, .id = "DF") 

```

## ROC Curve

```{r}
setwd("H:/oral_contraception_over_time/results")

roc_curve_xgb_df1 <- augment(fit_xgb_train_df1, new_data = df1_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 1 (age 27)") +
  labs(subtitle = "DF1")
ggsave("roc_curve_xgb_recipe4_df1.png", roc_curve_xgb_df1)


roc_curve_xgb_df2 <- augment(fit_xgb_train_df2, new_data = df2_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 2 (age 27)") +
  labs(subtitle = "DF2")
ggsave("roc_curve_xgb_recipe4_df2.png", roc_curve_xgb_df2)

roc_curve_xgb_df3 <- augment(fit_xgb_train_df3, new_data = df3_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 2 (age 37)") +
  labs(subtitle = "DF3")
ggsave("roc_curve_xgb_recipe4_df3.png", roc_curve_xgb_df3)

roc_curve_xgb_df4 <- augment(fit_xgb_train_df4, new_data = df4_test) %>%
  roc_curve(hormon_iudor, .pred_1) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 2, color = "gray", size = 1) +
  ggtitle("ROC curve - Birth cohort 3 (age 37)") +
  labs(subtitle = "DF4")
ggsave("roc_curve_xgb_recipe4_df4.png", roc_curve_xgb_df4)

```
